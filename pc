Binary file ./.git/modules/qemu_stm32/objects/pack/pack-c75aab25ef6c160c301790d071e2ae5e1cd6f4c2.pack matches
Binary file ./.git/modules/qemu_stm32/index matches
./Debug_Qemu/Debug_Qemu.cbp:		<Unit filename="../qemu_stm32/tests/fdc-test.c">
./Debug_Qemu/Debug_Qemu.cbp.save:		<Unit filename="../qemu_stm32/tests/fdc-test.c">
./Debug_Qemu/Debug_Qemu.cscope_file_list:"/home/garyb/project/qemu_stm32/tests/fdc-test.c"
./qemu_stm32/qom/cpu.c:    dc->realize = cpu_common_realizefn;
./qemu_stm32/qom/cpu.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/include/qom/object.h: *     dc->reset = my_device_reset;
./qemu_stm32/include/qom/object.h: *     dc->parent_do_something(obj);
./qemu_stm32/include/qom/object.h: *     dc->parent_do_something = mc->do_something;
./qemu_stm32/include/hw/qdev-properties.h: *   dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/include/hw/qdev-properties.h: *    * no need for dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/monitor.c:        if (!dc->cannot_instantiate_with_device_add_yet
./qemu_stm32/pc-bios/optionrom/multiboot.asm:# 1 "/usr/include/stdc-predef.h" 1 3 4
./qemu_stm32/pc-bios/optionrom/linuxboot.asm:# 1 "/usr/include/stdc-predef.h" 1 3 4
./qemu_stm32/pc-bios/optionrom/kvmvapic.asm:# 1 "/usr/include/stdc-predef.h" 1 3 4
./qemu_stm32/dump.c:     * dc->buf_size should not be less than size, otherwise dc will never be
./qemu_stm32/dump.c:    assert(size <= dc->buf_size);
./qemu_stm32/dump.c:     * if flag_sync is set, synchronize data in dc->buf into vmcore.
./qemu_stm32/dump.c:     * write the data in dc->buf to dc->fd and reset dc->buf
./qemu_stm32/dump.c:    if ((!flag_sync && dc->data_size + size > dc->buf_size) ||
./qemu_stm32/dump.c:        (flag_sync && dc->data_size > 0)) {
./qemu_stm32/dump.c:        if (write_buffer(dc->fd, dc->offset, dc->buf, dc->data_size) < 0) {
./qemu_stm32/dump.c:        dc->offset += dc->data_size;
./qemu_stm32/dump.c:        dc->data_size = 0;
./qemu_stm32/dump.c:        memcpy(dc->buf + dc->data_size, buf, size);
./qemu_stm32/dump.c:        dc->data_size += size;
./qemu_stm32/qdev-monitor.c:    if (dc->bus_type) {
./qemu_stm32/qdev-monitor.c:        error_printf(", bus %s", dc->bus_type);
./qemu_stm32/qdev-monitor.c:    if (dc->desc) {
./qemu_stm32/qdev-monitor.c:        error_printf(", desc \"%s\"", dc->desc);
./qemu_stm32/qdev-monitor.c:    if (dc->cannot_instantiate_with_device_add_yet) {
./qemu_stm32/qdev-monitor.c:                 ? !test_bit(i, dc->categories)
./qemu_stm32/qdev-monitor.c:                 : !bitmap_empty(dc->categories, DEVICE_CATEGORY_MAX))
./qemu_stm32/qdev-monitor.c:                    && dc->cannot_instantiate_with_device_add_yet)) {
./qemu_stm32/qdev-monitor.c:    if (dc->cannot_instantiate_with_device_add_yet) {
./qemu_stm32/qdev-monitor.c:        if (!object_dynamic_cast(OBJECT(bus), dc->bus_type)) {
./qemu_stm32/qdev-monitor.c:    } else if (dc->bus_type != NULL) {
./qemu_stm32/qdev-monitor.c:        bus = qbus_find_recursive(sysbus_get_default(), NULL, dc->bus_type);
./qemu_stm32/qdev-monitor.c:                          dc->bus_type, driver);
Binary file ./qemu_stm32/.git/objects/pack/pack-5e0c5eb41ac11594aa5b3708efc266609b96c6a8.pack matches
Binary file ./qemu_stm32/.git/index matches
./qemu_stm32/hw/s390x/event-facility.c:    dc->reset = reset_event_facility;
./qemu_stm32/hw/s390x/event-facility.c:    dc->vmsd = &vmstate_event_facility;
./qemu_stm32/hw/s390x/event-facility.c:    dc->bus_type = TYPE_SCLP_EVENTS_BUS;
./qemu_stm32/hw/s390x/event-facility.c:    dc->unplug = qdev_simple_unplug_cb;
./qemu_stm32/hw/s390x/event-facility.c:    dc->realize = event_realize;
./qemu_stm32/hw/s390x/event-facility.c:    dc->unrealize = event_unrealize;
./qemu_stm32/hw/s390x/ipl.c:    dc->props = s390_ipl_properties;
./qemu_stm32/hw/s390x/ipl.c:    dc->reset = s390_ipl_reset;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->props = s390_virtio_net_properties;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->props = s390_virtio_serial_properties;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->props = s390_virtio_rng_properties;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->init = s390_virtio_busdev_init;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->bus_type = TYPE_S390_VIRTIO_BUS;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->unplug = qdev_simple_unplug_cb;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->reset = s390_virtio_busdev_reset;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->props = s390_virtio_scsi_properties;
./qemu_stm32/hw/s390x/s390-virtio-bus.c:    dc->props = s390_vhost_scsi_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->reset = virtio_ccw_reset;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->props = virtio_ccw_net_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->reset = virtio_ccw_reset;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->props = virtio_ccw_blk_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->reset = virtio_ccw_reset;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->props = virtio_ccw_serial_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->reset = virtio_ccw_reset;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->props = virtio_ccw_balloon_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->reset = virtio_ccw_reset;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->props = virtio_ccw_scsi_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->reset = virtio_ccw_reset;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->props = vhost_ccw_scsi_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->reset = virtio_ccw_reset;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->props = virtio_ccw_rng_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->props = virtio_ccw_properties;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->init = virtio_ccw_busdev_init;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->exit = virtio_ccw_busdev_exit;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->unplug = virtio_ccw_busdev_unplug;
./qemu_stm32/hw/s390x/virtio-ccw.c:    dc->bus_type = TYPE_VIRTUAL_CSS_BUS;
./qemu_stm32/hw/s390x/sclpquiesce.c:    dc->reset = quiesce_reset;
./qemu_stm32/hw/s390x/sclpquiesce.c:    dc->vmsd = &vmstate_sclpquiesce;
./qemu_stm32/hw/tpm/tpm_tis.c:    dc->realize = tpm_tis_realizefn;
./qemu_stm32/hw/tpm/tpm_tis.c:    dc->props = tpm_tis_properties;
./qemu_stm32/hw/tpm/tpm_tis.c:    dc->reset = tpm_tis_reset;
./qemu_stm32/hw/tpm/tpm_tis.c:    dc->vmsd  = &vmstate_tpm_tis;
./qemu_stm32/hw/gpio/puv3_gpio.c:    sdc->init = puv3_gpio_init;
./qemu_stm32/hw/gpio/stm32_afio.c:    dc->reset = stm32_afio_reset;
./qemu_stm32/hw/gpio/stm32_afio.c:    dc->props = stm32_afio_properties;
./qemu_stm32/hw/gpio/max7310.c:    dc->reset = max7310_reset;
./qemu_stm32/hw/gpio/max7310.c:    dc->vmsd = &vmstate_max7310;
./qemu_stm32/hw/gpio/stm32_gpio.c:    dc->reset = stm32_gpio_reset;
./qemu_stm32/hw/gpio/stm32_gpio.c:    dc->props = stm32_gpio_properties;
./qemu_stm32/hw/gpio/zaurus.c:    dc->desc = "Scoop2 Sharp custom ASIC";
./qemu_stm32/hw/gpio/zaurus.c:    dc->vmsd = &vmstate_scoop_regs;
./qemu_stm32/hw/gpio/zaurus.c:    dc->props = scoop_sysbus_properties;
./qemu_stm32/hw/gpio/pl061.c:    dc->vmsd = &vmstate_pl061;
./qemu_stm32/hw/gpio/omap_gpio.c:    dc->reset = omap_gpif_reset;
./qemu_stm32/hw/gpio/omap_gpio.c:    dc->props = omap_gpio_properties;
./qemu_stm32/hw/gpio/omap_gpio.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/gpio/omap_gpio.c:    dc->reset = omap2_gpif_reset;
./qemu_stm32/hw/gpio/omap_gpio.c:    dc->props = omap2_gpio_properties;
./qemu_stm32/hw/gpio/omap_gpio.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/gpio/stm32_exti.c:    dc->reset = stm32_exti_reset;
./qemu_stm32/hw/isa/pc87312.c:    dc->realize = pc87312_realize;
./qemu_stm32/hw/isa/pc87312.c:    dc->reset = pc87312_reset;
./qemu_stm32/hw/isa/pc87312.c:    dc->vmsd = &vmstate_pc87312;
./qemu_stm32/hw/isa/pc87312.c:    dc->props = pc87312_properties;
./qemu_stm32/hw/isa/lpc_ich9.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/isa/lpc_ich9.c:    dc->reset = ich9_lpc_reset;
./qemu_stm32/hw/isa/lpc_ich9.c:    dc->vmsd = &vmstate_ich9_lpc;
./qemu_stm32/hw/isa/lpc_ich9.c:    dc->desc = "ICH9 LPC bridge";
./qemu_stm32/hw/isa/lpc_ich9.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/isa/piix4.c:    dc->desc = "ISA bridge";
./qemu_stm32/hw/isa/piix4.c:    dc->vmsd = &vmstate_piix4;
./qemu_stm32/hw/isa/piix4.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/isa/piix4.c:    dc->hotpluggable = false;
./qemu_stm32/hw/isa/isa-bus.c:    dc->fw_name = "isa";
./qemu_stm32/hw/isa/vt82c686.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/isa/vt82c686.c:    dc->desc = "AC97";
./qemu_stm32/hw/isa/vt82c686.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/isa/vt82c686.c:    dc->desc = "MC97";
./qemu_stm32/hw/isa/vt82c686.c:    dc->desc = "PM";
./qemu_stm32/hw/isa/vt82c686.c:    dc->vmsd = &vmstate_acpi;
./qemu_stm32/hw/isa/vt82c686.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/isa/vt82c686.c:    dc->props = via_pm_properties;
./qemu_stm32/hw/isa/vt82c686.c:    dc->desc = "ISA bridge";
./qemu_stm32/hw/isa/vt82c686.c:    dc->vmsd = &vmstate_via;
./qemu_stm32/hw/isa/vt82c686.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/isa/i82378.c:    dc->vmsd = &vmstate_i82378;
./qemu_stm32/hw/isa/i82378.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/display/milkymist-vgafb.c:    dc->reset = milkymist_vgafb_reset;
./qemu_stm32/hw/display/milkymist-vgafb.c:    dc->vmsd = &vmstate_milkymist_vgafb;
./qemu_stm32/hw/display/milkymist-vgafb.c:    dc->props = milkymist_vgafb_properties;
./qemu_stm32/hw/display/vga-pci.c:    dc->vmsd = &vmstate_vga_pci;
./qemu_stm32/hw/display/vga-pci.c:    dc->props = vga_pci_properties;
./qemu_stm32/hw/display/vga-pci.c:    dc->hotpluggable = false;
./qemu_stm32/hw/display/vga-pci.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/vga-pci.c:    dc->vmsd = &vmstate_vga_pci;
./qemu_stm32/hw/display/vga-pci.c:    dc->props = secondary_pci_properties;
./qemu_stm32/hw/display/vga-pci.c:    dc->reset = pci_secondary_vga_reset;
./qemu_stm32/hw/display/exynos4210_fimd.c:    dc->vmsd = &exynos4210_fimd_vmstate;
./qemu_stm32/hw/display/exynos4210_fimd.c:    dc->reset = exynos4210_fimd_reset;
./qemu_stm32/hw/display/tcx.c:    dc->realize = tcx_realizefn;
./qemu_stm32/hw/display/tcx.c:    dc->reset = tcx_reset;
./qemu_stm32/hw/display/tcx.c:    dc->vmsd = &vmstate_tcx;
./qemu_stm32/hw/display/tcx.c:    dc->props = tcx_properties;
./qemu_stm32/hw/display/vga-isa.c:    dc->realize = vga_isa_realizefn;
./qemu_stm32/hw/display/vga-isa.c:    dc->reset = vga_isa_reset;
./qemu_stm32/hw/display/vga-isa.c:    dc->vmsd = &vmstate_vga_common;
./qemu_stm32/hw/display/vga-isa.c:    dc->props = vga_isa_properties;
./qemu_stm32/hw/display/vga-isa.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/cg3.c:    dc->realize = cg3_realizefn;
./qemu_stm32/hw/display/cg3.c:    dc->reset = cg3_reset;
./qemu_stm32/hw/display/cg3.c:    dc->vmsd = &vmstate_cg3;
./qemu_stm32/hw/display/cg3.c:    dc->props = cg3_properties;
./qemu_stm32/hw/display/jazz_led.c:    dc->desc = "Jazz LED display",
./qemu_stm32/hw/display/jazz_led.c:    dc->vmsd = &vmstate_jazz_led;
./qemu_stm32/hw/display/jazz_led.c:    dc->reset = jazz_led_reset;
./qemu_stm32/hw/display/milkymist-tmu2.c:    dc->reset = milkymist_tmu2_reset;
./qemu_stm32/hw/display/milkymist-tmu2.c:    dc->vmsd = &vmstate_milkymist_tmu2;
./qemu_stm32/hw/display/cirrus_vga.c:    dc->vmsd  = &vmstate_cirrus_vga;
./qemu_stm32/hw/display/cirrus_vga.c:    dc->realize = isa_cirrus_vga_realizefn;
./qemu_stm32/hw/display/cirrus_vga.c:    dc->props = isa_cirrus_vga_properties;
./qemu_stm32/hw/display/cirrus_vga.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/cirrus_vga.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/cirrus_vga.c:    dc->desc = "Cirrus CLGD 54xx VGA";
./qemu_stm32/hw/display/cirrus_vga.c:    dc->vmsd = &vmstate_pci_cirrus_vga;
./qemu_stm32/hw/display/cirrus_vga.c:    dc->props = pci_vga_cirrus_properties;
./qemu_stm32/hw/display/cirrus_vga.c:    dc->hotpluggable = false;
./qemu_stm32/hw/display/g364fb.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/g364fb.c:    dc->desc = "G364 framebuffer";
./qemu_stm32/hw/display/g364fb.c:    dc->reset = g364fb_sysbus_reset;
./qemu_stm32/hw/display/g364fb.c:    dc->vmsd = &vmstate_g364fb;
./qemu_stm32/hw/display/g364fb.c:    dc->props = g364fb_sysbus_properties;
./qemu_stm32/hw/display/qxl.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/qxl.c:    dc->desc = "Spice QXL GPU (primary, vga compatible)";
./qemu_stm32/hw/display/qxl.c:    dc->reset = qxl_reset_handler;
./qemu_stm32/hw/display/qxl.c:    dc->vmsd = &qxl_vmstate;
./qemu_stm32/hw/display/qxl.c:    dc->props = qxl_properties;
./qemu_stm32/hw/display/qxl.c:    dc->hotpluggable = false;
./qemu_stm32/hw/display/qxl.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/qxl.c:    dc->desc = "Spice QXL GPU (secondary)";
./qemu_stm32/hw/display/qxl.c:    dc->reset = qxl_reset_handler;
./qemu_stm32/hw/display/qxl.c:    dc->vmsd = &qxl_vmstate;
./qemu_stm32/hw/display/qxl.c:    dc->props = qxl_properties;
./qemu_stm32/hw/display/vmware_vga.c:    dc->reset = vmsvga_reset;
./qemu_stm32/hw/display/vmware_vga.c:    dc->vmsd = &vmstate_vmware_vga;
./qemu_stm32/hw/display/vmware_vga.c:    dc->props = vga_vmware_properties;
./qemu_stm32/hw/display/vmware_vga.c:    dc->hotpluggable = false;
./qemu_stm32/hw/display/vmware_vga.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/pl110.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/display/pl110.c:    dc->vmsd = &vmstate_pl110;
./qemu_stm32/hw/display/ssd0303.c:    dc->vmsd = &vmstate_ssd0303;
./qemu_stm32/hw/audio/es1370.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/es1370.c:    dc->desc = "ENSONIQ AudioPCI ES1370";
./qemu_stm32/hw/audio/es1370.c:    dc->vmsd = &vmstate_es1370;
./qemu_stm32/hw/audio/gus.c:    dc->realize = gus_realizefn;
./qemu_stm32/hw/audio/gus.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/gus.c:    dc->desc = "Gravis Ultrasound GF1";
./qemu_stm32/hw/audio/gus.c:    dc->vmsd = &vmstate_gus;
./qemu_stm32/hw/audio/gus.c:    dc->props = gus_properties;
./qemu_stm32/hw/audio/cs4231.c:    dc->reset = cs_reset;
./qemu_stm32/hw/audio/cs4231.c:    dc->vmsd = &vmstate_cs4231;
./qemu_stm32/hw/audio/cs4231.c:    dc->props = cs4231_properties;
./qemu_stm32/hw/audio/intel-hda.c:    return cdc->init(dev);
./qemu_stm32/hw/audio/intel-hda.c:    if (cdc->exit) {
./qemu_stm32/hw/audio/intel-hda.c:        cdc->exit(dev);
./qemu_stm32/hw/audio/intel-hda.c:    cdc->command(codec, nid, data);
./qemu_stm32/hw/audio/intel-hda.c:        if (cdc->stream) {
./qemu_stm32/hw/audio/intel-hda.c:            cdc->stream(cdev, stream, running, output);
./qemu_stm32/hw/audio/intel-hda.c:    dc->reset = intel_hda_reset;
./qemu_stm32/hw/audio/intel-hda.c:    dc->vmsd = &vmstate_intel_hda;
./qemu_stm32/hw/audio/intel-hda.c:    dc->props = intel_hda_properties;
./qemu_stm32/hw/audio/intel-hda.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/intel-hda.c:    dc->desc = "Intel HD Audio Controller (ich6)";
./qemu_stm32/hw/audio/intel-hda.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/intel-hda.c:    dc->desc = "Intel HD Audio Controller (ich9)";
./qemu_stm32/hw/audio/adlib.c:    dc->realize = adlib_realizefn;
./qemu_stm32/hw/audio/adlib.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/adlib.c:    dc->desc = ADLIB_DESC;
./qemu_stm32/hw/audio/adlib.c:    dc->props = adlib_properties;
./qemu_stm32/hw/audio/wm8750.c:    dc->vmsd = &vmstate_wm8750;
./qemu_stm32/hw/audio/sb16.c:    dc->realize = sb16_realizefn;
./qemu_stm32/hw/audio/sb16.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/sb16.c:    dc->desc = "Creative Sound Blaster 16";
./qemu_stm32/hw/audio/sb16.c:    dc->vmsd = &vmstate_sb16;
./qemu_stm32/hw/audio/sb16.c:    dc->props = sb16_properties;
./qemu_stm32/hw/audio/ac97.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/ac97.c:    dc->desc = "Intel 82801AA AC97 Audio";
./qemu_stm32/hw/audio/ac97.c:    dc->vmsd = &vmstate_ac97;
./qemu_stm32/hw/audio/ac97.c:    dc->props = ac97_properties;
./qemu_stm32/hw/audio/marvell_88w8618.c:    dc->reset = mv88w8618_audio_reset;
./qemu_stm32/hw/audio/marvell_88w8618.c:    dc->vmsd = &mv88w8618_audio_vmsd;
./qemu_stm32/hw/audio/marvell_88w8618.c:    dc->props = mv88w8618_audio_properties;
./qemu_stm32/hw/audio/marvell_88w8618.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/audio/pl041.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/pl041.c:    dc->reset = pl041_device_reset;
./qemu_stm32/hw/audio/pl041.c:    dc->vmsd = &vmstate_pl041;
./qemu_stm32/hw/audio/pl041.c:    dc->props = pl041_device_properties;
./qemu_stm32/hw/audio/pcspk.c:    dc->realize = pcspk_realizefn;
./qemu_stm32/hw/audio/pcspk.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/pcspk.c:    dc->props = pcspk_properties;
./qemu_stm32/hw/audio/pcspk.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/audio/cs4231a.c:    dc->realize = cs4231a_realizefn;
./qemu_stm32/hw/audio/cs4231a.c:    dc->reset = cs4231a_reset;
./qemu_stm32/hw/audio/cs4231a.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/cs4231a.c:    dc->desc = "Crystal Semiconductor CS4231A";
./qemu_stm32/hw/audio/cs4231a.c:    dc->vmsd = &vmstate_cs4231a;
./qemu_stm32/hw/audio/cs4231a.c:    dc->props = cs4231a_properties;
./qemu_stm32/hw/audio/milkymist-ac97.c:    dc->reset = milkymist_ac97_reset;
./qemu_stm32/hw/audio/milkymist-ac97.c:    dc->vmsd = &vmstate_milkymist_ac97;
./qemu_stm32/hw/audio/hda-codec.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/audio/hda-codec.c:    dc->reset = hda_audio_reset;
./qemu_stm32/hw/audio/hda-codec.c:    dc->vmsd = &vmstate_hda_audio;
./qemu_stm32/hw/audio/hda-codec.c:    dc->props = hda_audio_properties;
./qemu_stm32/hw/audio/hda-codec.c:    dc->desc = "HDA Audio Codec, output-only (line-out)";
./qemu_stm32/hw/audio/hda-codec.c:    dc->desc = "HDA Audio Codec, duplex (line-out, line-in)";
./qemu_stm32/hw/audio/hda-codec.c:    dc->desc = "HDA Audio Codec, duplex (speaker, microphone)";
./qemu_stm32/hw/block/m25p80.c:    dc->vmsd = &vmstate_m25p80;
./qemu_stm32/hw/block/nvme.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/block/nvme.c:    dc->desc = "Non-Volatile Memory Express";
./qemu_stm32/hw/block/nvme.c:    dc->props = nvme_props;
./qemu_stm32/hw/block/nvme.c:    dc->vmsd = &nvme_vmstate;
./qemu_stm32/hw/block/onenand.c:    dc->reset = onenand_system_reset;
./qemu_stm32/hw/block/onenand.c:    dc->props = onenand_properties;
./qemu_stm32/hw/block/nand.c:    dc->realize = nand_realize;
./qemu_stm32/hw/block/nand.c:    dc->reset = nand_reset;
./qemu_stm32/hw/block/nand.c:    dc->vmsd = &vmstate_nand;
./qemu_stm32/hw/block/nand.c:    dc->props = nand_properties;
./qemu_stm32/hw/block/pflash_cfi01.c:    dc->realize = pflash_cfi01_realize;
./qemu_stm32/hw/block/pflash_cfi01.c:    dc->props = pflash_cfi01_properties;
./qemu_stm32/hw/block/pflash_cfi01.c:    dc->vmsd = &vmstate_pflash;
./qemu_stm32/hw/block/pflash_cfi01.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/block/virtio-blk.c:    dc->props = virtio_blk_properties;
./qemu_stm32/hw/block/virtio-blk.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/block/virtio-blk.c:    vdc->realize = virtio_blk_device_realize;
./qemu_stm32/hw/block/virtio-blk.c:    vdc->unrealize = virtio_blk_device_unrealize;
./qemu_stm32/hw/block/virtio-blk.c:    vdc->get_config = virtio_blk_update_config;
./qemu_stm32/hw/block/virtio-blk.c:    vdc->set_config = virtio_blk_set_config;
./qemu_stm32/hw/block/virtio-blk.c:    vdc->get_features = virtio_blk_get_features;
./qemu_stm32/hw/block/virtio-blk.c:    vdc->set_status = virtio_blk_set_status;
./qemu_stm32/hw/block/virtio-blk.c:    vdc->reset = virtio_blk_reset;
./qemu_stm32/hw/block/virtio-blk.c:    vdc->save = virtio_blk_save_device;
./qemu_stm32/hw/block/virtio-blk.c:    vdc->load = virtio_blk_load_device;
./qemu_stm32/hw/block/fdc.c:    dc->realize = isabus_fdc_realize;
./qemu_stm32/hw/block/fdc.c:    dc->fw_name = "fdc";
./qemu_stm32/hw/block/fdc.c:    dc->reset = fdctrl_external_reset_isa;
./qemu_stm32/hw/block/fdc.c:    dc->vmsd = &vmstate_isa_fdc;
./qemu_stm32/hw/block/fdc.c:    dc->props = isa_fdc_properties;
./qemu_stm32/hw/block/fdc.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/block/fdc.c:    dc->props = sysbus_fdc_properties;
./qemu_stm32/hw/block/fdc.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/block/fdc.c:    dc->props = sun4m_fdc_properties;
./qemu_stm32/hw/block/fdc.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/block/fdc.c:    dc->realize = sysbus_fdc_common_realize;
./qemu_stm32/hw/block/fdc.c:    dc->reset = fdctrl_external_reset_sysbus;
./qemu_stm32/hw/block/fdc.c:    dc->vmsd = &vmstate_sysbus_fdc;
./qemu_stm32/hw/block/pflash_cfi02.c:    dc->realize = pflash_cfi02_realize;
./qemu_stm32/hw/block/pflash_cfi02.c:    dc->props = pflash_cfi02_properties;
./qemu_stm32/hw/xen/xen_pt.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/xen/xen_pt.c:    dc->desc = "Assign an host PCI device with Xen";
./qemu_stm32/hw/xen/xen_pt.c:    dc->props = xen_pci_passthrough_properties;
./qemu_stm32/hw/nvram/mac_nvram.c:    dc->realize = macio_nvram_realizefn;
./qemu_stm32/hw/nvram/mac_nvram.c:    dc->unrealize = macio_nvram_unrealizefn;
./qemu_stm32/hw/nvram/mac_nvram.c:    dc->reset = macio_nvram_reset;
./qemu_stm32/hw/nvram/mac_nvram.c:    dc->vmsd = &vmstate_macio_nvram;
./qemu_stm32/hw/nvram/mac_nvram.c:    dc->props = macio_nvram_properties;
./qemu_stm32/hw/nvram/spapr_nvram.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/nvram/spapr_nvram.c:    dc->props = spapr_nvram_properties;
./qemu_stm32/hw/nvram/ds1225y.c:    dc->vmsd = &vmstate_nvram;
./qemu_stm32/hw/nvram/ds1225y.c:    dc->props = nvram_sysbus_properties;
./qemu_stm32/hw/nvram/fw_cfg.c:    dc->realize = fw_cfg_realize;
./qemu_stm32/hw/nvram/fw_cfg.c:    dc->reset = fw_cfg_reset;
./qemu_stm32/hw/nvram/fw_cfg.c:    dc->vmsd = &vmstate_fw_cfg;
./qemu_stm32/hw/nvram/fw_cfg.c:    dc->props = fw_cfg_properties;
./qemu_stm32/hw/pcmcia/pxa2xx.c:    dc->realize = pxa2xx_pcmcia_realize;
./qemu_stm32/hw/cpu/arm11mpcore.c:    dc->realize = mpcore_priv_realize;
./qemu_stm32/hw/cpu/arm11mpcore.c:    dc->props = mpcore_priv_properties;
./qemu_stm32/hw/cpu/icc_bus.c:    if (idc->realize) {
./qemu_stm32/hw/cpu/icc_bus.c:        idc->realize(dev, errp);
./qemu_stm32/hw/cpu/icc_bus.c:    dc->realize = icc_device_realize;
./qemu_stm32/hw/cpu/icc_bus.c:    dc->bus_type = TYPE_ICC_BUS;
./qemu_stm32/hw/cpu/icc_bus.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/cpu/a15mpcore.c:    dc->realize = a15mp_priv_realize;
./qemu_stm32/hw/cpu/a15mpcore.c:    dc->props = a15mp_priv_properties;
./qemu_stm32/hw/cpu/a9mpcore.c:    dc->realize = a9mp_priv_realize;
./qemu_stm32/hw/cpu/a9mpcore.c:    dc->props = a9mp_priv_properties;
./qemu_stm32/hw/cpu/realview_mpcore.c:    dc->realize = realview_mpcore_realize;
./qemu_stm32/hw/cpu/realview_mpcore.c:    dc->props = mpcore_rirq_properties;
./qemu_stm32/hw/pci-host/bonito.c:    dc->desc = "Host bridge";
./qemu_stm32/hw/pci-host/bonito.c:    dc->vmsd = &vmstate_bonito;
./qemu_stm32/hw/pci-host/bonito.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/uninorth.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/uninorth.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/uninorth.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/uninorth.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/prep.c:    dc->desc = "PReP Host Bridge - Motorola Raven";
./qemu_stm32/hw/pci-host/prep.c:    dc->vmsd = &vmstate_raven;
./qemu_stm32/hw/pci-host/prep.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/prep.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-host/prep.c:    dc->realize = raven_pcihost_realizefn;
./qemu_stm32/hw/pci-host/prep.c:    dc->props = raven_pcihost_properties;
./qemu_stm32/hw/pci-host/prep.c:    dc->fw_name = "pci";
./qemu_stm32/hw/pci-host/versatile.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/versatile.c:    dc->realize = pci_vpb_realize;
./qemu_stm32/hw/pci-host/versatile.c:    dc->reset = pci_vpb_reset;
./qemu_stm32/hw/pci-host/versatile.c:    dc->vmsd = &pci_vpb_vmstate;
./qemu_stm32/hw/pci-host/versatile.c:    dc->props = pci_vpb_properties;
./qemu_stm32/hw/pci-host/grackle.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/apb.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/apb.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-host/apb.c:    dc->reset = pci_pbm_reset;
./qemu_stm32/hw/pci-host/apb.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-host/apb.c:    dc->reset = pci_bridge_reset;
./qemu_stm32/hw/pci-host/apb.c:    dc->vmsd = &vmstate_pci_device;
./qemu_stm32/hw/pci-host/q35.c:    dc->realize = q35_host_realize;
./qemu_stm32/hw/pci-host/q35.c:    dc->props = mch_props;
./qemu_stm32/hw/pci-host/q35.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-host/q35.c:    dc->fw_name = "pci";
./qemu_stm32/hw/pci-host/q35.c:    dc->reset = mch_reset;
./qemu_stm32/hw/pci-host/q35.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-host/q35.c:    dc->desc = "Host bridge";
./qemu_stm32/hw/pci-host/q35.c:    dc->vmsd = &vmstate_mch;
./qemu_stm32/hw/pci-host/q35.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/ppce500.c:    dc->desc = "Host bridge";
./qemu_stm32/hw/pci-host/ppce500.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/ppce500.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-host/ppce500.c:    dc->props = pcihost_properties;
./qemu_stm32/hw/pci-host/ppce500.c:    dc->vmsd = &vmstate_ppce500_pci;
./qemu_stm32/hw/pci-host/piix.c:    dc->desc        = "ISA bridge";
./qemu_stm32/hw/pci-host/piix.c:    dc->vmsd        = &vmstate_piix3;
./qemu_stm32/hw/pci-host/piix.c:    dc->hotpluggable   = false;
./qemu_stm32/hw/pci-host/piix.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/piix.c:    dc->desc        = "ISA bridge";
./qemu_stm32/hw/pci-host/piix.c:    dc->vmsd        = &vmstate_piix3;
./qemu_stm32/hw/pci-host/piix.c:    dc->hotpluggable   = false;
./qemu_stm32/hw/pci-host/piix.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/piix.c:    dc->desc = "Host bridge";
./qemu_stm32/hw/pci-host/piix.c:    dc->vmsd = &vmstate_i440fx;
./qemu_stm32/hw/pci-host/piix.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-host/piix.c:    dc->hotpluggable   = false;
./qemu_stm32/hw/pci-host/piix.c:    dc->realize = i440fx_pcihost_realize;
./qemu_stm32/hw/pci-host/piix.c:    dc->fw_name = "pci";
./qemu_stm32/hw/pci-host/piix.c:    dc->props = i440fx_props;
./qemu_stm32/hw/pci-bridge/pci_bridge_dev.c:    dc->desc = "Standard PCI Bridge";
./qemu_stm32/hw/pci-bridge/pci_bridge_dev.c:    dc->reset = qdev_pci_bridge_dev_reset;
./qemu_stm32/hw/pci-bridge/pci_bridge_dev.c:    dc->props = pci_bridge_dev_properties;
./qemu_stm32/hw/pci-bridge/pci_bridge_dev.c:    dc->vmsd = &pci_bridge_dev_vmstate;
./qemu_stm32/hw/pci-bridge/pci_bridge_dev.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-bridge/xio3130_upstream.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-bridge/xio3130_upstream.c:    dc->desc = "TI X3130 Upstream Port of PCI Express Switch";
./qemu_stm32/hw/pci-bridge/xio3130_upstream.c:    dc->reset = xio3130_upstream_reset;
./qemu_stm32/hw/pci-bridge/xio3130_upstream.c:    dc->vmsd = &vmstate_xio3130_upstream;
./qemu_stm32/hw/pci-bridge/ioh3420.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-bridge/ioh3420.c:    dc->desc = "Intel IOH device id 3420 PCIE Root Port";
./qemu_stm32/hw/pci-bridge/ioh3420.c:    dc->reset = ioh3420_reset;
./qemu_stm32/hw/pci-bridge/ioh3420.c:    dc->vmsd = &vmstate_ioh3420;
./qemu_stm32/hw/pci-bridge/ioh3420.c:    dc->props = ioh3420_props;
./qemu_stm32/hw/pci-bridge/dec.c:    dc->desc = "DEC 21154 PCI-PCI bridge";
./qemu_stm32/hw/pci-bridge/dec.c:    dc->reset = pci_bridge_reset;
./qemu_stm32/hw/pci-bridge/dec.c:    dc->vmsd = &vmstate_pci_device;
./qemu_stm32/hw/pci-bridge/dec.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/pci-bridge/dec.c:    sdc->init = pci_dec_21154_device_init;
./qemu_stm32/hw/pci-bridge/xio3130_downstream.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/pci-bridge/xio3130_downstream.c:    dc->desc = "TI X3130 Downstream Port of PCI Express Switch";
./qemu_stm32/hw/pci-bridge/xio3130_downstream.c:    dc->reset = xio3130_downstream_reset;
./qemu_stm32/hw/pci-bridge/xio3130_downstream.c:    dc->vmsd = &vmstate_xio3130_downstream;
./qemu_stm32/hw/pci-bridge/xio3130_downstream.c:    dc->props = xio3130_downstream_props;
./qemu_stm32/hw/pci-bridge/i82801b11.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/scsi/scsi-generic.c:    dc->fw_name = "disk";
./qemu_stm32/hw/scsi/scsi-generic.c:    dc->desc = "pass through generic scsi device (/dev/sg*)";
./qemu_stm32/hw/scsi/scsi-generic.c:    dc->reset = scsi_generic_reset;
./qemu_stm32/hw/scsi/scsi-generic.c:    dc->props = scsi_generic_properties;
./qemu_stm32/hw/scsi/scsi-generic.c:    dc->vmsd  = &vmstate_scsi_device;
./qemu_stm32/hw/scsi/virtio-scsi.c:    vdc->get_config = virtio_scsi_get_config;
./qemu_stm32/hw/scsi/virtio-scsi.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/virtio-scsi.c:    dc->props = virtio_scsi_properties;
./qemu_stm32/hw/scsi/virtio-scsi.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/virtio-scsi.c:    vdc->realize = virtio_scsi_device_realize;
./qemu_stm32/hw/scsi/virtio-scsi.c:    vdc->unrealize = virtio_scsi_device_unrealize;
./qemu_stm32/hw/scsi/virtio-scsi.c:    vdc->set_config = virtio_scsi_set_config;
./qemu_stm32/hw/scsi/virtio-scsi.c:    vdc->get_features = virtio_scsi_get_features;
./qemu_stm32/hw/scsi/virtio-scsi.c:    vdc->reset = virtio_scsi_reset;
./qemu_stm32/hw/scsi/vmw_pvscsi.c:    dc->reset = pvscsi_reset;
./qemu_stm32/hw/scsi/vmw_pvscsi.c:    dc->vmsd = &vmstate_pvscsi;
./qemu_stm32/hw/scsi/vmw_pvscsi.c:    dc->props = pvscsi_properties;
./qemu_stm32/hw/scsi/vmw_pvscsi.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/megasas.c:    dc->props = megasas_properties;
./qemu_stm32/hw/scsi/megasas.c:    dc->reset = megasas_scsi_reset;
./qemu_stm32/hw/scsi/megasas.c:    dc->vmsd = &vmstate_megasas;
./qemu_stm32/hw/scsi/megasas.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/megasas.c:    dc->desc = "LSI MegaRAID SAS 1078";
./qemu_stm32/hw/scsi/vhost-scsi.c:    dc->props = vhost_scsi_properties;
./qemu_stm32/hw/scsi/vhost-scsi.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/vhost-scsi.c:    vdc->realize = vhost_scsi_realize;
./qemu_stm32/hw/scsi/vhost-scsi.c:    vdc->unrealize = vhost_scsi_unrealize;
./qemu_stm32/hw/scsi/vhost-scsi.c:    vdc->get_features = vhost_scsi_get_features;
./qemu_stm32/hw/scsi/vhost-scsi.c:    vdc->set_config = vhost_scsi_set_config;
./qemu_stm32/hw/scsi/vhost-scsi.c:    vdc->set_status = vhost_scsi_set_status;
./qemu_stm32/hw/scsi/lsi53c895a.c:    dc->reset = lsi_scsi_reset;
./qemu_stm32/hw/scsi/lsi53c895a.c:    dc->vmsd = &vmstate_lsi_scsi;
./qemu_stm32/hw/scsi/lsi53c895a.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->fw_name = "disk";
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->desc = "virtual SCSI disk";
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->reset = scsi_disk_reset;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->props = scsi_hd_properties;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->vmsd  = &vmstate_scsi_disk_state;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->fw_name = "disk";
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->desc = "virtual SCSI CD-ROM";
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->reset = scsi_disk_reset;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->props = scsi_cd_properties;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->vmsd  = &vmstate_scsi_disk_state;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->fw_name = "disk";
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->desc = "SCSI block device passthrough";
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->reset = scsi_disk_reset;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->props = scsi_block_properties;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->vmsd  = &vmstate_scsi_disk_state;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->fw_name = "disk";
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->desc = "virtual SCSI disk or CD-ROM (legacy)";
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->reset = scsi_disk_reset;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->props = scsi_disk_properties;
./qemu_stm32/hw/scsi/scsi-disk.c:    dc->vmsd  = &vmstate_scsi_disk_state;
./qemu_stm32/hw/scsi/esp-pci.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/esp-pci.c:    dc->desc = "AMD Am53c974 PCscsi-PCI SCSI adapter";
./qemu_stm32/hw/scsi/esp-pci.c:    dc->reset = esp_pci_hard_reset;
./qemu_stm32/hw/scsi/esp-pci.c:    dc->vmsd = &vmstate_esp_pci_scsi;
./qemu_stm32/hw/scsi/esp-pci.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/esp-pci.c:    dc->desc = "Tekram DC-390 SCSI adapter";
./qemu_stm32/hw/scsi/esp.c:    dc->realize = sysbus_esp_realize;
./qemu_stm32/hw/scsi/esp.c:    dc->reset = sysbus_esp_hard_reset;
./qemu_stm32/hw/scsi/esp.c:    dc->vmsd = &vmstate_sysbus_esp_scsi;
./qemu_stm32/hw/scsi/esp.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/spapr_vscsi.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/scsi/spapr_vscsi.c:    dc->props = spapr_vscsi_properties;
./qemu_stm32/hw/scsi/spapr_vscsi.c:    dc->vmsd = &vmstate_spapr_vscsi;
./qemu_stm32/hw/mips/gt64xxx_pci.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/mips/gt64xxx_pci.c:    sdc->init = gt64120_init;
./qemu_stm32/hw/mips/gt64xxx_pci.c:    dc->vmsd = &vmstate_gt64120;
./qemu_stm32/hw/sparc64/sun4u.c:    dc->props = prom_properties;
./qemu_stm32/hw/sparc64/sun4u.c:    dc->props = ram_properties;
./qemu_stm32/hw/9pfs/virtio-9p-device.c:    dc->props = virtio_9p_properties;
./qemu_stm32/hw/9pfs/virtio-9p-device.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/9pfs/virtio-9p-device.c:    vdc->realize = virtio_9p_device_realize;
./qemu_stm32/hw/9pfs/virtio-9p-device.c:    vdc->get_features = virtio_9p_get_features;
./qemu_stm32/hw/9pfs/virtio-9p-device.c:    vdc->get_config = virtio_9p_get_config;
./qemu_stm32/hw/misc/pc-testdev.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/misc/pc-testdev.c:    dc->realize = testdev_realizefn;
./qemu_stm32/hw/misc/arm11scu.c:    dc->realize = arm11_scu_realize;
./qemu_stm32/hw/misc/arm11scu.c:    dc->props = arm11_scu_properties;
./qemu_stm32/hw/misc/slavio_misc.c:    dc->reset = slavio_misc_reset;
./qemu_stm32/hw/misc/slavio_misc.c:    dc->vmsd = &vmstate_misc;
./qemu_stm32/hw/misc/applesmc.c:    dc->realize = applesmc_isa_realize;
./qemu_stm32/hw/misc/applesmc.c:    dc->reset = qdev_applesmc_isa_reset;
./qemu_stm32/hw/misc/applesmc.c:    dc->props = applesmc_isa_properties;
./qemu_stm32/hw/misc/applesmc.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/misc/pvpanic.c:    dc->realize = pvpanic_isa_realizefn;
./qemu_stm32/hw/misc/pvpanic.c:    dc->props = pvpanic_isa_properties;
./qemu_stm32/hw/misc/pvpanic.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/misc/milkymist-pfpu.c:    dc->reset = milkymist_pfpu_reset;
./qemu_stm32/hw/misc/milkymist-pfpu.c:    dc->vmsd = &vmstate_milkymist_pfpu;
./qemu_stm32/hw/misc/arm_sysctl.c:    dc->realize = arm_sysctl_realize;
./qemu_stm32/hw/misc/arm_sysctl.c:    dc->reset = arm_sysctl_reset;
./qemu_stm32/hw/misc/arm_sysctl.c:    dc->vmsd = &vmstate_arm_sysctl;
./qemu_stm32/hw/misc/arm_sysctl.c:    dc->props = arm_sysctl_properties;
./qemu_stm32/hw/misc/exynos4210_pmu.c:    dc->reset = exynos4210_pmu_reset;
./qemu_stm32/hw/misc/exynos4210_pmu.c:    dc->vmsd = &exynos4210_pmu_vmstate;
./qemu_stm32/hw/misc/sga.c:    set_bit(DEVICE_CATEGORY_DISPLAY, dc->categories);
./qemu_stm32/hw/misc/sga.c:    dc->realize = sga_realizefn;
./qemu_stm32/hw/misc/sga.c:    dc->desc = "Serial Graphics Adapter";
./qemu_stm32/hw/misc/debugexit.c:    dc->realize = debug_exit_realizefn;
./qemu_stm32/hw/misc/debugexit.c:    dc->props = debug_exit_properties;
./qemu_stm32/hw/misc/debugexit.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/misc/pci-testdev.c:    dc->desc = "PCI Test Device";
./qemu_stm32/hw/misc/pci-testdev.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/misc/pci-testdev.c:    dc->reset = qdev_pci_testdev_reset;
./qemu_stm32/hw/misc/imx_ccm.c:    dc->reset = imx_ccm_reset;
./qemu_stm32/hw/misc/imx_ccm.c:    dc->vmsd = &vmstate_imx_ccm;
./qemu_stm32/hw/misc/imx_ccm.c:    dc->desc = "i.MX Clock Control Module";
./qemu_stm32/hw/misc/macio/cuda.c:    dc->realize = cuda_realizefn;
./qemu_stm32/hw/misc/macio/cuda.c:    dc->reset = cuda_reset;
./qemu_stm32/hw/misc/macio/cuda.c:    dc->vmsd = &vmstate_cuda;
./qemu_stm32/hw/misc/macio/macio.c:    pdc->init = macio_oldworld_initfn;
./qemu_stm32/hw/misc/macio/macio.c:    pdc->device_id = PCI_DEVICE_ID_APPLE_343S1201;
./qemu_stm32/hw/misc/macio/macio.c:    pdc->init = macio_newworld_initfn;
./qemu_stm32/hw/misc/macio/macio.c:    pdc->device_id = PCI_DEVICE_ID_APPLE_UNI_N_KEYL;
./qemu_stm32/hw/misc/vmport.c:    dc->realize = vmport_realizefn;
./qemu_stm32/hw/misc/vmport.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/misc/tmp105.c:    dc->vmsd = &vmstate_tmp105;
./qemu_stm32/hw/misc/puv3_pm.c:    sdc->init = puv3_pm_init;
./qemu_stm32/hw/misc/ivshmem.c:    dc->reset = ivshmem_reset;
./qemu_stm32/hw/misc/ivshmem.c:    dc->props = ivshmem_properties;
./qemu_stm32/hw/misc/ivshmem.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/misc/a9scu.c:    dc->props = a9_scu_properties;
./qemu_stm32/hw/misc/a9scu.c:    dc->vmsd = &vmstate_a9_scu;
./qemu_stm32/hw/misc/a9scu.c:    dc->reset = a9_scu_reset;
./qemu_stm32/hw/misc/zynq_slcr.c:    dc->vmsd = &vmstate_zynq_slcr;
./qemu_stm32/hw/misc/zynq_slcr.c:    dc->reset = zynq_slcr_reset;
./qemu_stm32/hw/misc/eccmemctl.c:    dc->reset = ecc_reset;
./qemu_stm32/hw/misc/eccmemctl.c:    dc->vmsd = &vmstate_ecc;
./qemu_stm32/hw/misc/eccmemctl.c:    dc->props = ecc_properties;
./qemu_stm32/hw/misc/vfio.c:    dc->reset = vfio_pci_reset;
./qemu_stm32/hw/misc/vfio.c:    dc->props = vfio_pci_dev_properties;
./qemu_stm32/hw/misc/vfio.c:    dc->vmsd = &vfio_pci_vmstate;
./qemu_stm32/hw/misc/vfio.c:    dc->desc = "VFIO-based PCI device assignment";
./qemu_stm32/hw/misc/vfio.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/misc/vfio.c:    pdc->init = vfio_initfn;
./qemu_stm32/hw/misc/vfio.c:    pdc->exit = vfio_exitfn;
./qemu_stm32/hw/misc/vfio.c:    pdc->config_read = vfio_pci_read_config;
./qemu_stm32/hw/misc/vfio.c:    pdc->config_write = vfio_pci_write_config;
./qemu_stm32/hw/misc/vfio.c:    pdc->is_express = 1; /* We might be */
./qemu_stm32/hw/misc/mst_fpga.c:    dc->desc = "Mainstone II FPGA";
./qemu_stm32/hw/misc/mst_fpga.c:    dc->vmsd = &vmstate_mst_fpga_regs;
./qemu_stm32/hw/misc/arm_l2x0.c:    dc->vmsd = &vmstate_l2x0;
./qemu_stm32/hw/misc/arm_l2x0.c:    dc->props = l2x0_properties;
./qemu_stm32/hw/misc/arm_l2x0.c:    dc->reset = l2x0_priv_reset;
./qemu_stm32/hw/misc/milkymist-hpdmc.c:    dc->reset = milkymist_hpdmc_reset;
./qemu_stm32/hw/misc/milkymist-hpdmc.c:    dc->vmsd = &vmstate_milkymist_hpdmc;
./qemu_stm32/hw/intc/omap_intc.c:    dc->reset = omap_inth_reset;
./qemu_stm32/hw/intc/omap_intc.c:    dc->props = omap_intc_properties;
./qemu_stm32/hw/intc/omap_intc.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/intc/omap_intc.c:    dc->reset = omap_inth_reset;
./qemu_stm32/hw/intc/omap_intc.c:    dc->props = omap2_intc_properties;
./qemu_stm32/hw/intc/omap_intc.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/intc/lm32_pic.c:    dc->reset = pic_reset;
./qemu_stm32/hw/intc/lm32_pic.c:    dc->vmsd = &vmstate_lm32_pic;
./qemu_stm32/hw/intc/arm_gic_common.c:    dc->reset = arm_gic_common_reset;
./qemu_stm32/hw/intc/arm_gic_common.c:    dc->realize = arm_gic_common_realize;
./qemu_stm32/hw/intc/arm_gic_common.c:    dc->props = arm_gic_common_properties;
./qemu_stm32/hw/intc/arm_gic_common.c:    dc->vmsd = &vmstate_gic;
./qemu_stm32/hw/intc/realview_gic.c:    dc->realize = realview_gic_realize;
./qemu_stm32/hw/intc/ioapic_common.c:    dc->realize = ioapic_common_realize;
./qemu_stm32/hw/intc/ioapic_common.c:    dc->vmsd = &vmstate_ioapic_common;
./qemu_stm32/hw/intc/pl190.c:    dc->reset = pl190_reset;
./qemu_stm32/hw/intc/pl190.c:    dc->vmsd = &vmstate_pl190;
./qemu_stm32/hw/intc/openpic.c:    dc->realize = openpic_realize;
./qemu_stm32/hw/intc/openpic.c:    dc->props = openpic_properties;
./qemu_stm32/hw/intc/openpic.c:    dc->reset = openpic_reset;
./qemu_stm32/hw/intc/ioapic.c:    dc->reset = ioapic_reset_common;
./qemu_stm32/hw/intc/xilinx_intc.c:    dc->props = xilinx_intc_properties;
./qemu_stm32/hw/intc/s390_flic_kvm.c:    dc->realize = kvm_s390_flic_realize;
./qemu_stm32/hw/intc/s390_flic_kvm.c:    dc->unrealize = kvm_s390_flic_unrealize;
./qemu_stm32/hw/intc/s390_flic_kvm.c:    dc->reset = kvm_s390_flic_reset;
./qemu_stm32/hw/intc/arm_gic_kvm.c:    kgc->parent_realize = dc->realize;
./qemu_stm32/hw/intc/arm_gic_kvm.c:    kgc->parent_reset = dc->reset;
./qemu_stm32/hw/intc/arm_gic_kvm.c:    dc->realize = kvm_arm_gic_realize;
./qemu_stm32/hw/intc/arm_gic_kvm.c:    dc->reset = kvm_arm_gic_reset;
./qemu_stm32/hw/intc/grlib_irqmp.c:    dc->reset = grlib_irqmp_reset;
./qemu_stm32/hw/intc/grlib_irqmp.c:    dc->props = grlib_irqmp_properties;
./qemu_stm32/hw/intc/grlib_irqmp.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/intc/armv7m_nvic.c:    nc->parent_reset = dc->reset;
./qemu_stm32/hw/intc/armv7m_nvic.c:    nc->parent_realize = dc->realize;
./qemu_stm32/hw/intc/armv7m_nvic.c:    dc->vmsd  = &vmstate_nvic;
./qemu_stm32/hw/intc/armv7m_nvic.c:    dc->reset = armv7m_nvic_reset;
./qemu_stm32/hw/intc/armv7m_nvic.c:    dc->realize = armv7m_nvic_realize;
./qemu_stm32/hw/intc/etraxfs_pic.c:    dc->props = etraxfs_pic_properties;
./qemu_stm32/hw/intc/etraxfs_pic.c:     * no need for dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/intc/xics_kvm.c:    dc->reset = icp_kvm_reset;
./qemu_stm32/hw/intc/xics_kvm.c:    dc->realize = ics_kvm_realize;
./qemu_stm32/hw/intc/xics_kvm.c:    dc->reset = ics_kvm_reset;
./qemu_stm32/hw/intc/xics_kvm.c:    dc->realize = xics_kvm_realize;
./qemu_stm32/hw/intc/openpic_kvm.c:    dc->realize = kvm_openpic_realize;
./qemu_stm32/hw/intc/openpic_kvm.c:    dc->props = kvm_openpic_properties;
./qemu_stm32/hw/intc/openpic_kvm.c:    dc->reset = kvm_openpic_reset;
./qemu_stm32/hw/intc/allwinner-a10-pic.c:    dc->reset = aw_a10_pic_reset;
./qemu_stm32/hw/intc/allwinner-a10-pic.c:    dc->desc = "allwinner a10 pic";
./qemu_stm32/hw/intc/allwinner-a10-pic.c:    dc->vmsd = &vmstate_aw_a10_pic;
./qemu_stm32/hw/intc/arm_gic.c:    agc->parent_realize = dc->realize;
./qemu_stm32/hw/intc/arm_gic.c:    dc->realize = arm_gic_realize;
./qemu_stm32/hw/intc/xics.c:    dc->reset = xics_common_reset;
./qemu_stm32/hw/intc/xics.c:    dc->reset = icp_reset;
./qemu_stm32/hw/intc/xics.c:    dc->vmsd = &vmstate_icp_server;
./qemu_stm32/hw/intc/xics.c:    dc->realize = ics_realize;
./qemu_stm32/hw/intc/xics.c:    dc->vmsd = &vmstate_ics;
./qemu_stm32/hw/intc/xics.c:    dc->reset = ics_reset;
./qemu_stm32/hw/intc/xics.c:    dc->realize = xics_realize;
./qemu_stm32/hw/intc/i8259.c:    k->parent_realize = dc->realize;
./qemu_stm32/hw/intc/i8259.c:    dc->realize = pic_realize;
./qemu_stm32/hw/intc/i8259.c:    dc->reset = pic_reset;
./qemu_stm32/hw/intc/slavio_intctl.c:    dc->reset = slavio_intctl_reset;
./qemu_stm32/hw/intc/slavio_intctl.c:    dc->vmsd = &vmstate_intctl;
./qemu_stm32/hw/intc/imx_avic.c:    dc->vmsd = &vmstate_imx_avic;
./qemu_stm32/hw/intc/imx_avic.c:    dc->reset = imx_avic_reset;
./qemu_stm32/hw/intc/imx_avic.c:    dc->desc = "i.MX Advanced Vector Interrupt Controller";
./qemu_stm32/hw/intc/i8259_common.c:    dc->vmsd = &vmstate_pic_common;
./qemu_stm32/hw/intc/i8259_common.c:    dc->props = pic_properties_common;
./qemu_stm32/hw/intc/i8259_common.c:    dc->realize = pic_common_realize;
./qemu_stm32/hw/intc/i8259_common.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/intc/apic_common.c:    dc->vmsd = &vmstate_apic_common;
./qemu_stm32/hw/intc/apic_common.c:    dc->reset = apic_reset_common;
./qemu_stm32/hw/intc/apic_common.c:    dc->props = apic_properties_common;
./qemu_stm32/hw/intc/apic_common.c:    idc->realize = apic_common_realize;
./qemu_stm32/hw/intc/apic_common.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/intc/exynos4210_gic.c:    dc->props = exynos4210_gic_properties;
./qemu_stm32/hw/intc/exynos4210_gic.c:    dc->reset = exynos4210_irq_gate_reset;
./qemu_stm32/hw/intc/exynos4210_gic.c:    dc->vmsd = &vmstate_exynos4210_irq_gate;
./qemu_stm32/hw/intc/exynos4210_gic.c:    dc->props = exynos4210_irq_gate_properties;
./qemu_stm32/hw/intc/exynos4210_combiner.c:    dc->reset = exynos4210_combiner_reset;
./qemu_stm32/hw/intc/exynos4210_combiner.c:    dc->props = exynos4210_combiner_properties;
./qemu_stm32/hw/intc/exynos4210_combiner.c:    dc->vmsd = &vmstate_exynos4210_combiner;
./qemu_stm32/hw/intc/puv3_intc.c:    sdc->init = puv3_intc_init;
./qemu_stm32/hw/watchdog/wdt_i6300esb.c:    dc->reset = i6300esb_reset;
./qemu_stm32/hw/watchdog/wdt_i6300esb.c:    dc->vmsd = &vmstate_i6300esb;
./qemu_stm32/hw/watchdog/wdt_i6300esb.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/watchdog/wdt_ib700.c:    dc->realize = wdt_ib700_realize;
./qemu_stm32/hw/watchdog/wdt_ib700.c:    dc->reset = wdt_ib700_reset;
./qemu_stm32/hw/watchdog/wdt_ib700.c:    dc->vmsd = &vmstate_ib700;
./qemu_stm32/hw/watchdog/wdt_ib700.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/ipack/tpci200.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/ipack/tpci200.c:    dc->desc = "TEWS TPCI200 IndustryPack carrier";
./qemu_stm32/hw/ipack/tpci200.c:    dc->vmsd = &vmstate_tpci200;
./qemu_stm32/hw/dma/pl080.c:    dc->vmsd = &vmstate_pl080;
./qemu_stm32/hw/dma/pl330.c:    dc->realize = pl330_realize;
./qemu_stm32/hw/dma/pl330.c:    dc->reset = pl330_reset;
./qemu_stm32/hw/dma/pl330.c:    dc->props = pl330_properties;
./qemu_stm32/hw/dma/pl330.c:    dc->vmsd = &vmstate_pl330;
./qemu_stm32/hw/dma/i82374.c:    dc->realize = i82374_isa_realize;
./qemu_stm32/hw/dma/i82374.c:    dc->vmsd = &vmstate_isa_i82374;
./qemu_stm32/hw/dma/i82374.c:    dc->props = i82374_properties;
./qemu_stm32/hw/dma/sparc32_dma.c:    dc->reset = dma_reset;
./qemu_stm32/hw/dma/sparc32_dma.c:    dc->vmsd = &vmstate_dma;
./qemu_stm32/hw/dma/sparc32_dma.c:    dc->props = sparc32_dma_properties;
./qemu_stm32/hw/dma/sparc32_dma.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/dma/puv3_dma.c:    sdc->init = puv3_dma_init;
./qemu_stm32/hw/dma/pxa2xx_dma.c:    dc->desc = "PXA2xx DMA controller";
./qemu_stm32/hw/dma/pxa2xx_dma.c:    dc->vmsd = &vmstate_pxa2xx_dma;
./qemu_stm32/hw/dma/pxa2xx_dma.c:    dc->props = pxa2xx_dma_properties;
./qemu_stm32/hw/dma/sun4m_iommu.c:    dc->reset = iommu_reset;
./qemu_stm32/hw/dma/sun4m_iommu.c:    dc->vmsd = &vmstate_iommu;
./qemu_stm32/hw/dma/sun4m_iommu.c:    dc->props = iommu_properties;
./qemu_stm32/hw/dma/xilinx_axidma.c:    dc->realize = xilinx_axidma_realize,
./qemu_stm32/hw/dma/xilinx_axidma.c:    dc->reset = xilinx_axidma_reset;
./qemu_stm32/hw/dma/xilinx_axidma.c:    dc->props = axidma_properties;
./qemu_stm32/hw/i386/kvm/pci-assign.c:    dc->props       = assigned_dev_properties;
./qemu_stm32/hw/i386/kvm/pci-assign.c:    dc->vmsd        = &vmstate_assigned_device;
./qemu_stm32/hw/i386/kvm/pci-assign.c:    dc->reset       = reset_assigned_device;
./qemu_stm32/hw/i386/kvm/pci-assign.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/i386/kvm/pci-assign.c:    dc->desc        = "KVM-based PCI passthrough";
./qemu_stm32/hw/i386/kvm/clock.c:    dc->realize = kvmclock_realize;
./qemu_stm32/hw/i386/kvm/clock.c:    dc->vmsd = &kvmclock_vmsd;
./qemu_stm32/hw/i386/kvm/ioapic.c:    dc->reset    = kvm_ioapic_reset;
./qemu_stm32/hw/i386/kvm/ioapic.c:    dc->props    = kvm_ioapic_properties;
./qemu_stm32/hw/i386/kvm/i8259.c:    dc->reset     = kvm_pic_reset;
./qemu_stm32/hw/i386/kvm/i8259.c:    kpc->parent_realize = dc->realize;
./qemu_stm32/hw/i386/kvm/i8259.c:    dc->realize   = kvm_pic_realize;
./qemu_stm32/hw/i386/kvm/i8254.c:    kpc->parent_realize = dc->realize;
./qemu_stm32/hw/i386/kvm/i8254.c:    dc->realize = kvm_pit_realizefn;
./qemu_stm32/hw/i386/kvm/i8254.c:    dc->reset = kvm_pit_reset;
./qemu_stm32/hw/i386/kvm/i8254.c:    dc->props = kvm_pit_properties;
./qemu_stm32/hw/i386/pc.c:    dc->realize = port92_realizefn;
./qemu_stm32/hw/i386/pc.c:    dc->reset = port92_reset;
./qemu_stm32/hw/i386/pc.c:    dc->vmsd = &vmstate_port92_isa;
./qemu_stm32/hw/i386/pc.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/i386/pc.c:    MemoryRegion *mr = ddc->get_memory_region(dimm);
./qemu_stm32/hw/i386/xen/xen_pvdevice.c:    dc->desc = "Xen PV Device";
./qemu_stm32/hw/i386/xen/xen_pvdevice.c:    dc->props = xen_pv_props;
./qemu_stm32/hw/i386/xen/xen_platform.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/i386/xen/xen_platform.c:    dc->desc = "XEN platform pci device";
./qemu_stm32/hw/i386/xen/xen_platform.c:    dc->reset = platform_reset;
./qemu_stm32/hw/i386/xen/xen_platform.c:    dc->vmsd = &vmstate_xen_platform;
./qemu_stm32/hw/i386/kvmvapic.c:    dc->reset   = vapic_reset;
./qemu_stm32/hw/i386/kvmvapic.c:    dc->vmsd    = &vmstate_vapic;
./qemu_stm32/hw/i386/kvmvapic.c:    dc->realize = vapic_realize;
./qemu_stm32/hw/i386/acpi-build.c:        if (!dc->hotpluggable || bridge_in_acpi) {
./qemu_stm32/hw/timer/puv3_ost.c:    sdc->init = puv3_ost_init;
./qemu_stm32/hw/timer/arm_timer.c:    sdc->init = icp_pit_init;
./qemu_stm32/hw/timer/arm_timer.c:    sdc->init = sp804_init;
./qemu_stm32/hw/timer/twl92230.c:    dc->vmsd = &vmstate_menelaus;
./qemu_stm32/hw/timer/grlib_gptimer.c:    dc->reset = grlib_gptimer_reset;
./qemu_stm32/hw/timer/grlib_gptimer.c:    dc->props = grlib_gptimer_properties;
./qemu_stm32/hw/timer/mc146818rtc.c:    dc->realize = rtc_realizefn;
./qemu_stm32/hw/timer/mc146818rtc.c:    dc->vmsd = &vmstate_rtc;
./qemu_stm32/hw/timer/mc146818rtc.c:    dc->props = mc146818rtc_properties;
./qemu_stm32/hw/timer/mc146818rtc.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/timer/exynos4210_rtc.c:    dc->reset = exynos4210_rtc_reset;
./qemu_stm32/hw/timer/exynos4210_rtc.c:    dc->vmsd = &vmstate_exynos4210_rtc_state;
./qemu_stm32/hw/timer/ds1338.c:    dc->reset = ds1338_reset;
./qemu_stm32/hw/timer/ds1338.c:    dc->vmsd = &vmstate_ds1338;
./qemu_stm32/hw/timer/a9gtimer.c:    dc->realize = a9_gtimer_realize;
./qemu_stm32/hw/timer/a9gtimer.c:    dc->vmsd = &vmstate_a9_gtimer;
./qemu_stm32/hw/timer/a9gtimer.c:    dc->reset = a9_gtimer_reset;
./qemu_stm32/hw/timer/a9gtimer.c:    dc->props = a9_gtimer_properties;
./qemu_stm32/hw/timer/m48t59.c:    dc->realize = m48t59_isa_realize;
./qemu_stm32/hw/timer/m48t59.c:    dc->reset = m48t59_reset_isa;
./qemu_stm32/hw/timer/m48t59.c:    dc->props = m48t59_isa_properties;
./qemu_stm32/hw/timer/m48t59.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/timer/m48t59.c:    dc->reset = m48t59_reset_sysbus;
./qemu_stm32/hw/timer/m48t59.c:    dc->props = m48t59_properties;
./qemu_stm32/hw/timer/etraxfs_timer.c:    sdc->init = etraxfs_timer_init;
./qemu_stm32/hw/timer/arm_mptimer.c:    dc->realize = arm_mptimer_realize;
./qemu_stm32/hw/timer/arm_mptimer.c:    dc->vmsd = &vmstate_arm_mptimer;
./qemu_stm32/hw/timer/arm_mptimer.c:    dc->reset = arm_mptimer_reset;
./qemu_stm32/hw/timer/arm_mptimer.c:    dc->props = arm_mptimer_properties;
./qemu_stm32/hw/timer/allwinner-a10-pit.c:    dc->reset = a10_pit_reset;
./qemu_stm32/hw/timer/allwinner-a10-pit.c:    dc->props = a10_pit_properties;
./qemu_stm32/hw/timer/allwinner-a10-pit.c:    dc->desc = "allwinner a10 timer";
./qemu_stm32/hw/timer/allwinner-a10-pit.c:    dc->vmsd = &vmstate_a10_pit;
./qemu_stm32/hw/timer/digic-timer.c:    dc->reset = digic_timer_reset;
./qemu_stm32/hw/timer/digic-timer.c:    dc->vmsd = &vmstate_digic_timer;
./qemu_stm32/hw/timer/exynos4210_pwm.c:    dc->reset = exynos4210_pwm_reset;
./qemu_stm32/hw/timer/exynos4210_pwm.c:    dc->vmsd = &vmstate_exynos4210_pwm_state;
./qemu_stm32/hw/timer/imx_gpt.c:    dc->realize = imx_gpt_realize;
./qemu_stm32/hw/timer/imx_gpt.c:    dc->reset = imx_gpt_reset;
./qemu_stm32/hw/timer/imx_gpt.c:    dc->vmsd = &vmstate_imx_timer_gpt;
./qemu_stm32/hw/timer/imx_gpt.c:    dc->desc = "i.MX general timer";
./qemu_stm32/hw/timer/slavio_timer.c:    dc->reset = slavio_timer_reset;
./qemu_stm32/hw/timer/slavio_timer.c:    dc->vmsd = &vmstate_slavio_timer;
./qemu_stm32/hw/timer/slavio_timer.c:    dc->props = slavio_timer_properties;
./qemu_stm32/hw/timer/milkymist-sysctl.c:    dc->reset = milkymist_sysctl_reset;
./qemu_stm32/hw/timer/milkymist-sysctl.c:    dc->vmsd = &vmstate_milkymist_sysctl;
./qemu_stm32/hw/timer/milkymist-sysctl.c:    dc->props = milkymist_sysctl_properties;
./qemu_stm32/hw/timer/cadence_ttc.c:    dc->vmsd = &vmstate_cadence_ttc;
./qemu_stm32/hw/timer/tusb6010.c:    dc->reset = tusb6010_reset;
./qemu_stm32/hw/timer/lm32_timer.c:    dc->reset = timer_reset;
./qemu_stm32/hw/timer/lm32_timer.c:    dc->vmsd = &vmstate_lm32_timer;
./qemu_stm32/hw/timer/lm32_timer.c:    dc->props = lm32_timer_properties;
./qemu_stm32/hw/timer/i8254_common.c:    dc->realize = pit_common_realize;
./qemu_stm32/hw/timer/i8254_common.c:    dc->vmsd = &vmstate_pit_common;
./qemu_stm32/hw/timer/i8254_common.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/timer/i8254.c:    pc->parent_realize = dc->realize;
./qemu_stm32/hw/timer/i8254.c:    dc->realize = pit_realizefn;
./qemu_stm32/hw/timer/i8254.c:    dc->reset = pit_reset;
./qemu_stm32/hw/timer/i8254.c:    dc->props = pit_properties;
./qemu_stm32/hw/timer/stm32_rtc.c:    dc->reset = stm32_rtc_reset;
./qemu_stm32/hw/timer/stm32_rtc.c:    dc->props = stm32_rtc_properties;
./qemu_stm32/hw/timer/pl031.c:    dc->vmsd = &vmstate_pl031;
./qemu_stm32/hw/timer/xilinx_timer.c:    dc->realize = xilinx_timer_realize;
./qemu_stm32/hw/timer/xilinx_timer.c:    dc->props = xilinx_timer_properties;
./qemu_stm32/hw/timer/imx_epit.c:    dc->realize = imx_epit_realize;
./qemu_stm32/hw/timer/imx_epit.c:    dc->reset = imx_epit_reset;
./qemu_stm32/hw/timer/imx_epit.c:    dc->vmsd = &vmstate_imx_timer_epit;
./qemu_stm32/hw/timer/imx_epit.c:    dc->desc = "i.MX periodic timer";
./qemu_stm32/hw/timer/stm32_timer.c:    //dc->no_user = 1;
./qemu_stm32/hw/timer/stm32_timer.c:    dc->vmsd = &vmstate_stm32;
./qemu_stm32/hw/timer/stm32_timer.c:    dc->props = stm32_timer_properties;
./qemu_stm32/hw/timer/hpet.c:    dc->realize = hpet_realize;
./qemu_stm32/hw/timer/hpet.c:    dc->reset = hpet_reset;
./qemu_stm32/hw/timer/hpet.c:    dc->vmsd = &vmstate_hpet;
./qemu_stm32/hw/timer/hpet.c:    dc->props = hpet_device_properties;
./qemu_stm32/hw/timer/exynos4210_mct.c:    dc->reset = exynos4210_mct_reset;
./qemu_stm32/hw/timer/exynos4210_mct.c:    dc->vmsd = &vmstate_exynos4210_mct_state;
./qemu_stm32/hw/timer/pxa2xx_timer.c:    dc->desc = "PXA25x timer";
./qemu_stm32/hw/timer/pxa2xx_timer.c:    dc->props = pxa25x_timer_dev_properties;
./qemu_stm32/hw/timer/pxa2xx_timer.c:    dc->desc = "PXA27x timer";
./qemu_stm32/hw/timer/pxa2xx_timer.c:    dc->props = pxa27x_timer_dev_properties;
./qemu_stm32/hw/timer/pxa2xx_timer.c:    sdc->init = pxa2xx_timer_init;
./qemu_stm32/hw/timer/pxa2xx_timer.c:    dc->vmsd = &vmstate_pxa2xx_timer_regs;
./qemu_stm32/hw/sd/milkymist-memcard.c:    dc->reset = milkymist_memcard_reset;
./qemu_stm32/hw/sd/milkymist-memcard.c:    dc->vmsd = &vmstate_milkymist_memcard;
./qemu_stm32/hw/sd/sdhci.c:    dc->vmsd = &sdhci_vmstate;
./qemu_stm32/hw/sd/sdhci.c:    dc->props = sdhci_properties;
./qemu_stm32/hw/sd/sdhci.c:    dc->reset = sdhci_generic_reset;
./qemu_stm32/hw/sd/sdhci.c:    dc->realize = sdhci_realize;
./qemu_stm32/hw/sd/pl181.c:    sdc->init = pl181_init;
./qemu_stm32/hw/mem/pc-dimm.c:            di->hotpluggable = dc->hotpluggable;
./qemu_stm32/hw/mem/pc-dimm.c:    dc->realize = pc_dimm_realize;
./qemu_stm32/hw/mem/pc-dimm.c:    dc->props = pc_dimm_properties;
./qemu_stm32/hw/mem/pc-dimm.c:    ddc->get_memory_region = pc_dimm_get_memory_region;
./qemu_stm32/hw/arm/z2.c:    dc->vmsd = &vmstate_zipit_lcd_state;
./qemu_stm32/hw/arm/z2.c:    dc->vmsd = &vmstate_aer915_state;
./qemu_stm32/hw/arm/pxa2xx_pic.c:    dc->desc = "PXA2xx PIC";
./qemu_stm32/hw/arm/pxa2xx_pic.c:    dc->vmsd = &vmstate_pxa2xx_pic_regs;
./qemu_stm32/hw/arm/allwinner-a10.c:    dc->realize = aw_a10_realize;
./qemu_stm32/hw/arm/pxa2xx.c:    dc->desc = "PXA2xx RTC Controller";
./qemu_stm32/hw/arm/pxa2xx.c:    dc->vmsd = &vmstate_pxa2xx_rtc_regs;
./qemu_stm32/hw/arm/pxa2xx.c:    dc->desc = "PXA2xx I2C Bus Controller";
./qemu_stm32/hw/arm/pxa2xx.c:    dc->vmsd = &vmstate_pxa2xx_i2c;
./qemu_stm32/hw/arm/pxa2xx.c:    dc->props = pxa2xx_i2c_properties;
./qemu_stm32/hw/arm/pxa2xx.c:    sdc->init = pxa2xx_ssp_init;
./qemu_stm32/hw/arm/stm32_iwdg.c:    dc->reset = iwdg_reset;
./qemu_stm32/hw/arm/stm32_iwdg.c:    dc->vmsd = &vmstate_iwdg;
./qemu_stm32/hw/arm/stm32_iwdg.c:    dc->props = iwdg_properties;
./qemu_stm32/hw/arm/armv7m.c:    dc->props = bitband_properties;
./qemu_stm32/hw/arm/highbank.c:    dc->desc = "Calxeda Highbank registers";
./qemu_stm32/hw/arm/highbank.c:    dc->vmsd = &vmstate_highbank_regs;
./qemu_stm32/hw/arm/highbank.c:    dc->reset = highbank_regs_reset;
./qemu_stm32/hw/arm/pxa2xx_gpio.c:    dc->desc = "PXA2xx GPIO controller";
./qemu_stm32/hw/arm/pxa2xx_gpio.c:    dc->props = pxa2xx_gpio_properties;
./qemu_stm32/hw/arm/pxa2xx_gpio.c:    dc->vmsd = &vmstate_pxa2xx_gpio_regs;
./qemu_stm32/hw/arm/strongarm.c:    dc->desc = "StrongARM PIC";
./qemu_stm32/hw/arm/strongarm.c:    dc->vmsd = &vmstate_strongarm_pic_regs;
./qemu_stm32/hw/arm/strongarm.c:    dc->desc = "StrongARM RTC Controller";
./qemu_stm32/hw/arm/strongarm.c:    dc->vmsd = &vmstate_strongarm_rtc_regs;
./qemu_stm32/hw/arm/strongarm.c:    dc->desc = "StrongARM GPIO controller";
./qemu_stm32/hw/arm/strongarm.c:    dc->vmsd = &vmstate_strongarm_gpio_regs;
./qemu_stm32/hw/arm/strongarm.c:    dc->desc = "StrongARM PPC controller";
./qemu_stm32/hw/arm/strongarm.c:    dc->vmsd = &vmstate_strongarm_ppc_regs;
./qemu_stm32/hw/arm/strongarm.c:    dc->desc = "StrongARM UART controller";
./qemu_stm32/hw/arm/strongarm.c:    dc->reset = strongarm_uart_reset;
./qemu_stm32/hw/arm/strongarm.c:    dc->vmsd = &vmstate_strongarm_uart_regs;
./qemu_stm32/hw/arm/strongarm.c:    dc->props = strongarm_uart_properties;
./qemu_stm32/hw/arm/strongarm.c:    dc->desc = "StrongARM SSP controller";
./qemu_stm32/hw/arm/strongarm.c:    dc->reset = strongarm_ssp_reset;
./qemu_stm32/hw/arm/strongarm.c:    dc->vmsd = &vmstate_strongarm_ssp_regs;
./qemu_stm32/hw/arm/integratorcp.c:    dc->props = core_properties;
./qemu_stm32/hw/arm/integratorcp.c:    sdc->init = icp_pic_init;
./qemu_stm32/hw/arm/stm32_rcc.c:    dc->reset = stm32_rcc_reset;
./qemu_stm32/hw/arm/stm32_rcc.c:    dc->props = stm32_rcc_properties;
./qemu_stm32/hw/arm/stellaris.c:    sdc->init = stellaris_i2c_init;
./qemu_stm32/hw/arm/stellaris.c:    sdc->init = stellaris_gptm_init;
./qemu_stm32/hw/arm/stellaris.c:    sdc->init = stellaris_adc_init;
./qemu_stm32/hw/arm/musicpal.c:    dc->vmsd = &mv88w8618_eth_vmsd;
./qemu_stm32/hw/arm/musicpal.c:    dc->props = mv88w8618_eth_properties;
./qemu_stm32/hw/arm/musicpal.c:    dc->vmsd = &musicpal_lcd_vmsd;
./qemu_stm32/hw/arm/musicpal.c:    dc->reset = mv88w8618_pic_reset;
./qemu_stm32/hw/arm/musicpal.c:    dc->vmsd = &mv88w8618_pic_vmsd;
./qemu_stm32/hw/arm/musicpal.c:    dc->reset = mv88w8618_pit_reset;
./qemu_stm32/hw/arm/musicpal.c:    dc->vmsd = &mv88w8618_pit_vmsd;
./qemu_stm32/hw/arm/musicpal.c:    dc->vmsd = &mv88w8618_flashcfg_vmsd;
./qemu_stm32/hw/arm/musicpal.c:    dc->reset = musicpal_gpio_reset;
./qemu_stm32/hw/arm/musicpal.c:    dc->vmsd = &musicpal_gpio_vmsd;
./qemu_stm32/hw/arm/musicpal.c:    dc->vmsd = &musicpal_key_vmsd;
./qemu_stm32/hw/arm/musicpal.c:    sdc->init = mv88w8618_wlan_init;
./qemu_stm32/hw/arm/digic.c:    dc->realize = digic_realize;
./qemu_stm32/hw/arm/spitz.c:    dc->vmsd = &vmstate_sl_nand_info;
./qemu_stm32/hw/arm/spitz.c:    dc->props = sl_nand_properties;
./qemu_stm32/hw/arm/spitz.c:    dc->vmsd = &vmstate_spitz_kbd;
./qemu_stm32/hw/arm/spitz.c:    dc->props = spitz_keyboard_properties;
./qemu_stm32/hw/arm/spitz.c:    dc->vmsd = &vmstate_corgi_ssp_regs;
./qemu_stm32/hw/arm/spitz.c:    dc->vmsd = &vmstate_spitz_lcdtg_regs;
./qemu_stm32/hw/arm/stm32_crc.c:    dc->reset = stm32_crc_reset;
./qemu_stm32/hw/arm/stm32_crc.c:    //TODO: fix this: dc->no_user = 1;
./qemu_stm32/hw/arm/stm32_crc.c:    dc->props = stm32_crc_properties;
./qemu_stm32/hw/arm/stm32_dac.c:    dc->reset = stm32_dac_reset;
./qemu_stm32/hw/arm/stm32_dac.c:    dc->props = stm32_dac_properties;
./qemu_stm32/hw/arm/versatilepb.c:    dc->vmsd = &vmstate_vpb_sic;
./qemu_stm32/hw/arm/stm32_dma.c:	dc->reset = stm32_dma_reset;
./qemu_stm32/hw/arm/stm32_dma.c:	//TODO: fix this: dc->no_user = 1;
./qemu_stm32/hw/arm/stm32_dma.c:	dc->props = stm32_dma_properties;
./qemu_stm32/hw/arm/stm32_adc.c:    dc->reset = stm32_adc_reset;
./qemu_stm32/hw/arm/stm32_adc.c:    dc->props = stm32_adc_properties;
./qemu_stm32/hw/sh4/sh_pci.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/sh4/sh_pci.c:    sdc->init = sh_pci_device_init;
./qemu_stm32/hw/ppc/spapr_iommu.c:    dc->init = spapr_tce_table_realize;
./qemu_stm32/hw/ppc/spapr_iommu.c:    dc->reset = spapr_tce_reset;
./qemu_stm32/hw/ppc/spapr_iommu.c:    dc->unrealize = spapr_tce_table_unrealize;
./qemu_stm32/hw/ppc/spapr_pci_vfio.c:    dc->props = spapr_phb_vfio_properties;
./qemu_stm32/hw/ppc/spapr_pci_vfio.c:    dc->reset = spapr_phb_vfio_reset;
./qemu_stm32/hw/ppc/spapr_pci.c:    dc->realize = spapr_phb_realize;
./qemu_stm32/hw/ppc/spapr_pci.c:    dc->props = spapr_phb_properties;
./qemu_stm32/hw/ppc/spapr_pci.c:    dc->reset = spapr_phb_reset;
./qemu_stm32/hw/ppc/spapr_pci.c:    dc->vmsd = &vmstate_spapr_pci;
./qemu_stm32/hw/ppc/spapr_pci.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/ppc/spapr_pci.c:    dc->cannot_instantiate_with_device_add_yet = false;
./qemu_stm32/hw/ppc/spapr_vio.c:    dc->fw_name = "vdevice";
./qemu_stm32/hw/ppc/spapr.c:        snprintf(cpu_model, 32, "%s@%x", dc->fw_name, index);
./qemu_stm32/hw/ppc/spapr.c:        nodename = g_strdup_printf("%s@%x", dc->fw_name, index);
./qemu_stm32/hw/ppc/ppc4xx_pci.c:    dc->desc        = "Host bridge";
./qemu_stm32/hw/ppc/ppc4xx_pci.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/ppc/ppc4xx_pci.c:    dc->vmsd = &vmstate_ppc4xx_pci;
./qemu_stm32/hw/net/xilinx_ethlite.c:    dc->realize = xilinx_ethlite_realize;
./qemu_stm32/hw/net/xilinx_ethlite.c:    dc->reset = xilinx_ethlite_reset;
./qemu_stm32/hw/net/xilinx_ethlite.c:    dc->props = xilinx_ethlite_properties;
./qemu_stm32/hw/net/vmxnet3.c:    dc->desc = "VMWare Paravirtualized Ethernet v3";
./qemu_stm32/hw/net/vmxnet3.c:    dc->reset = vmxnet3_qdev_reset;
./qemu_stm32/hw/net/vmxnet3.c:    dc->vmsd = &vmstate_vmxnet3;
./qemu_stm32/hw/net/vmxnet3.c:    dc->props = vmxnet3_properties;
./qemu_stm32/hw/net/vmxnet3.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/lance.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/lance.c:    dc->fw_name = "ethernet";
./qemu_stm32/hw/net/lance.c:    dc->reset = lance_reset;
./qemu_stm32/hw/net/lance.c:    dc->vmsd = &vmstate_lance;
./qemu_stm32/hw/net/lance.c:    dc->props = lance_properties;
./qemu_stm32/hw/net/lance.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/net/virtio-net.c:    dc->props = virtio_net_properties;
./qemu_stm32/hw/net/virtio-net.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/virtio-net.c:    vdc->realize = virtio_net_device_realize;
./qemu_stm32/hw/net/virtio-net.c:    vdc->unrealize = virtio_net_device_unrealize;
./qemu_stm32/hw/net/virtio-net.c:    vdc->get_config = virtio_net_get_config;
./qemu_stm32/hw/net/virtio-net.c:    vdc->set_config = virtio_net_set_config;
./qemu_stm32/hw/net/virtio-net.c:    vdc->get_features = virtio_net_get_features;
./qemu_stm32/hw/net/virtio-net.c:    vdc->set_features = virtio_net_set_features;
./qemu_stm32/hw/net/virtio-net.c:    vdc->bad_features = virtio_net_bad_features;
./qemu_stm32/hw/net/virtio-net.c:    vdc->reset = virtio_net_reset;
./qemu_stm32/hw/net/virtio-net.c:    vdc->set_status = virtio_net_set_status;
./qemu_stm32/hw/net/virtio-net.c:    vdc->guest_notifier_mask = virtio_net_guest_notifier_mask;
./qemu_stm32/hw/net/virtio-net.c:    vdc->guest_notifier_pending = virtio_net_guest_notifier_pending;
./qemu_stm32/hw/net/virtio-net.c:    vdc->load = virtio_net_load_device;
./qemu_stm32/hw/net/virtio-net.c:    vdc->save = virtio_net_save_device;
./qemu_stm32/hw/net/pcnet-pci.c:    dc->reset = pci_reset;
./qemu_stm32/hw/net/pcnet-pci.c:    dc->vmsd = &vmstate_pci_pcnet;
./qemu_stm32/hw/net/pcnet-pci.c:    dc->props = pcnet_properties;
./qemu_stm32/hw/net/pcnet-pci.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/xgmac.c:    dc->vmsd = &vmstate_xgmac;
./qemu_stm32/hw/net/xgmac.c:    dc->props = xgmac_properties;
./qemu_stm32/hw/net/opencores_eth.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/opencores_eth.c:    dc->desc = "Opencores 10/100 Mbit Ethernet";
./qemu_stm32/hw/net/opencores_eth.c:    dc->reset = qdev_open_eth_reset;
./qemu_stm32/hw/net/opencores_eth.c:    dc->props = open_eth_properties;
./qemu_stm32/hw/net/eepro100.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/eepro100.c:    dc->props = e100_properties;
./qemu_stm32/hw/net/eepro100.c:    dc->desc = info->desc;
./qemu_stm32/hw/net/lan9118.c:    dc->reset = lan9118_reset;
./qemu_stm32/hw/net/lan9118.c:    dc->props = lan9118_properties;
./qemu_stm32/hw/net/lan9118.c:    dc->vmsd = &vmstate_lan9118;
./qemu_stm32/hw/net/pcnet.c:        int nnrc = nrdc<=1 ? CSR_RCVRL(s) : nrdc-1;
./qemu_stm32/hw/net/ne2000.c:    dc->vmsd = &vmstate_pci_ne2000;
./qemu_stm32/hw/net/ne2000.c:    dc->props = ne2000_properties;
./qemu_stm32/hw/net/ne2000.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/e1000.c:    d->phy_reg[PHY_ID2] = edc->phy_id2;
./qemu_stm32/hw/net/e1000.c:    d->eeprom_data[11] = d->eeprom_data[13] = pdc->device_id;
./qemu_stm32/hw/net/e1000.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/e1000.c:    dc->desc = "Intel Gigabit Ethernet";
./qemu_stm32/hw/net/e1000.c:    dc->reset = qdev_e1000_reset;
./qemu_stm32/hw/net/e1000.c:    dc->vmsd = &vmstate_e1000;
./qemu_stm32/hw/net/e1000.c:    dc->props = e1000_properties;
./qemu_stm32/hw/net/fsl_etsec/etsec.c:    dc->realize = etsec_realize;
./qemu_stm32/hw/net/fsl_etsec/etsec.c:    dc->reset = etsec_reset;
./qemu_stm32/hw/net/fsl_etsec/etsec.c:    dc->props = etsec_properties;
./qemu_stm32/hw/net/cadence_gem.c:    sdc->init = gem_init;
./qemu_stm32/hw/net/cadence_gem.c:    dc->props = gem_properties;
./qemu_stm32/hw/net/cadence_gem.c:    dc->vmsd = &vmstate_cadence_gem;
./qemu_stm32/hw/net/cadence_gem.c:    dc->reset = gem_reset;
./qemu_stm32/hw/net/smc91c111.c:    dc->reset = smc91c111_reset;
./qemu_stm32/hw/net/smc91c111.c:    dc->vmsd = &vmstate_smc91c111;
./qemu_stm32/hw/net/smc91c111.c:    dc->props = smc91c111_properties;
./qemu_stm32/hw/net/milkymist-minimac2.c:    dc->reset = milkymist_minimac2_reset;
./qemu_stm32/hw/net/milkymist-minimac2.c:    dc->vmsd = &vmstate_milkymist_minimac2;
./qemu_stm32/hw/net/milkymist-minimac2.c:    dc->props = milkymist_minimac2_properties;
./qemu_stm32/hw/net/mipsnet.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/mipsnet.c:    dc->desc = "MIPS Simulator network device";
./qemu_stm32/hw/net/mipsnet.c:    dc->reset = mipsnet_sysbus_reset;
./qemu_stm32/hw/net/mipsnet.c:    dc->vmsd = &vmstate_mipsnet;
./qemu_stm32/hw/net/mipsnet.c:    dc->props = mipsnet_properties;
./qemu_stm32/hw/net/ne2000-isa.c:    dc->realize = isa_ne2000_realizefn;
./qemu_stm32/hw/net/ne2000-isa.c:    dc->props = ne2000_isa_properties;
./qemu_stm32/hw/net/ne2000-isa.c:    dc->vmsd = &vmstate_isa_ne2000;
./qemu_stm32/hw/net/ne2000-isa.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/rtl8139.c:    dc->reset = rtl8139_reset;
./qemu_stm32/hw/net/rtl8139.c:    dc->vmsd = &vmstate_rtl8139;
./qemu_stm32/hw/net/rtl8139.c:    dc->props = rtl8139_properties;
./qemu_stm32/hw/net/rtl8139.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/spapr_llan.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/net/spapr_llan.c:    dc->props = spapr_vlan_properties;
./qemu_stm32/hw/net/spapr_llan.c:    dc->vmsd = &vmstate_spapr_llan;
./qemu_stm32/hw/net/stellaris_enet.c:    dc->unrealize = stellaris_enet_unrealize;
./qemu_stm32/hw/net/stellaris_enet.c:    dc->props = stellaris_enet_properties;
./qemu_stm32/hw/net/stellaris_enet.c:    dc->vmsd = &vmstate_stellaris_enet;
./qemu_stm32/hw/net/xilinx_axienet.c:    dc->realize = xilinx_enet_realize;
./qemu_stm32/hw/net/xilinx_axienet.c:    dc->props = xilinx_enet_properties;
./qemu_stm32/hw/net/xilinx_axienet.c:    dc->reset = xilinx_axienet_reset;
./qemu_stm32/hw/net/etraxfs_eth.c:    dc->props = etraxfs_eth_properties;
./qemu_stm32/hw/net/etraxfs_eth.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/net/allwinner_emac.c:    dc->realize = aw_emac_realize;
./qemu_stm32/hw/net/allwinner_emac.c:    dc->props = aw_emac_properties;
./qemu_stm32/hw/net/allwinner_emac.c:    dc->reset = aw_emac_reset;
./qemu_stm32/hw/net/allwinner_emac.c:    dc->vmsd = &vmstate_aw_emac;
./qemu_stm32/hw/ide/cmd646.c:    dc->props = cmd646_ide_properties;
./qemu_stm32/hw/ide/isa.c:    dc->realize = isa_ide_realizefn;
./qemu_stm32/hw/ide/isa.c:    dc->fw_name = "ide";
./qemu_stm32/hw/ide/isa.c:    dc->reset = isa_ide_reset;
./qemu_stm32/hw/ide/isa.c:    dc->props = isa_ide_properties;
./qemu_stm32/hw/ide/isa.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/ide/ahci.c:    dc->realize = sysbus_ahci_realize;
./qemu_stm32/hw/ide/ahci.c:    dc->vmsd = &vmstate_sysbus_ahci;
./qemu_stm32/hw/ide/ahci.c:    dc->props = sysbus_ahci_properties;
./qemu_stm32/hw/ide/ahci.c:    dc->reset = sysbus_ahci_reset;
./qemu_stm32/hw/ide/ahci.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/ide/qdev.c:    return dc->init(dev);
./qemu_stm32/hw/ide/qdev.c:    dc->fw_name = "drive";
./qemu_stm32/hw/ide/qdev.c:    dc->desc = "virtual IDE disk";
./qemu_stm32/hw/ide/qdev.c:    dc->props = ide_hd_properties;
./qemu_stm32/hw/ide/qdev.c:    dc->fw_name = "drive";
./qemu_stm32/hw/ide/qdev.c:    dc->desc = "virtual IDE CD-ROM";
./qemu_stm32/hw/ide/qdev.c:    dc->props = ide_cd_properties;
./qemu_stm32/hw/ide/qdev.c:    dc->fw_name = "drive";
./qemu_stm32/hw/ide/qdev.c:    dc->desc = "virtual IDE disk or CD-ROM (legacy)";
./qemu_stm32/hw/ide/qdev.c:    dc->props = ide_drive_properties;
./qemu_stm32/hw/ide/mmio.c:    dc->realize = mmio_ide_realizefn;
./qemu_stm32/hw/ide/mmio.c:    dc->reset = mmio_ide_reset;
./qemu_stm32/hw/ide/mmio.c:    dc->props = mmio_ide_properties;
./qemu_stm32/hw/ide/mmio.c:    dc->vmsd = &vmstate_ide_mmio;
./qemu_stm32/hw/ide/via.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/ide/microdrive.c:    dc->realize = microdrive_realize;
./qemu_stm32/hw/ide/microdrive.c:    dc->reset = md_reset;
./qemu_stm32/hw/ide/microdrive.c:    dc->vmsd = &vmstate_microdrive;
./qemu_stm32/hw/ide/ich.c:    dc->vmsd = &vmstate_ich9_ahci;
./qemu_stm32/hw/ide/ich.c:    dc->reset = pci_ich9_reset;
./qemu_stm32/hw/ide/ich.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/ide/macio.c:    dc->realize = macio_ide_realizefn;
./qemu_stm32/hw/ide/macio.c:    dc->reset = macio_ide_reset;
./qemu_stm32/hw/ide/macio.c:    dc->vmsd = &vmstate_pmac;
./qemu_stm32/hw/ide/piix.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/ide/piix.c:    dc->hotpluggable = false;
./qemu_stm32/hw/ide/piix.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/ide/piix.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/ide/piix.c:    dc->hotpluggable = false;
./qemu_stm32/hw/virtio/virtio-balloon.c:    dc->props = virtio_balloon_properties;
./qemu_stm32/hw/virtio/virtio-balloon.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/virtio/virtio-balloon.c:    vdc->realize = virtio_balloon_device_realize;
./qemu_stm32/hw/virtio/virtio-balloon.c:    vdc->unrealize = virtio_balloon_device_unrealize;
./qemu_stm32/hw/virtio/virtio-balloon.c:    vdc->get_config = virtio_balloon_get_config;
./qemu_stm32/hw/virtio/virtio-balloon.c:    vdc->set_config = virtio_balloon_set_config;
./qemu_stm32/hw/virtio/virtio-balloon.c:    vdc->get_features = virtio_balloon_get_features;
./qemu_stm32/hw/virtio/virtio-balloon.c:    vdc->save = virtio_balloon_save_device;
./qemu_stm32/hw/virtio/virtio-balloon.c:    vdc->load = virtio_balloon_load_device;
./qemu_stm32/hw/virtio/virtio-rng.c:    dc->props = virtio_rng_properties;
./qemu_stm32/hw/virtio/virtio-rng.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/virtio/virtio-rng.c:    vdc->realize = virtio_rng_device_realize;
./qemu_stm32/hw/virtio/virtio-rng.c:    vdc->unrealize = virtio_rng_device_unrealize;
./qemu_stm32/hw/virtio/virtio-rng.c:    vdc->get_features = get_features;
./qemu_stm32/hw/virtio/virtio-rng.c:    vdc->load = virtio_rng_load_device;
./qemu_stm32/hw/virtio/virtio-mmio.c:    dc->props = virtio_mmio_properties;
./qemu_stm32/hw/virtio/virtio-mmio.c:    dc->realize = virtio_mmio_realizefn;
./qemu_stm32/hw/virtio/virtio-mmio.c:    dc->reset = virtio_mmio_reset;
./qemu_stm32/hw/virtio/virtio-mmio.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/virtio/virtio.c:    if (vdc->save != NULL) {
./qemu_stm32/hw/virtio/virtio.c:        vdc->save(vdev, f);
./qemu_stm32/hw/virtio/virtio.c:    if (vdc->load != NULL) {
./qemu_stm32/hw/virtio/virtio.c:        ret = vdc->load(vdev, f, version_id);
./qemu_stm32/hw/virtio/virtio.c:    if (vdc->realize != NULL) {
./qemu_stm32/hw/virtio/virtio.c:        vdc->realize(dev, &err);
./qemu_stm32/hw/virtio/virtio.c:    if (vdc->unrealize != NULL) {
./qemu_stm32/hw/virtio/virtio.c:        vdc->unrealize(dev, &err);
./qemu_stm32/hw/virtio/virtio.c:    dc->realize = virtio_device_realize;
./qemu_stm32/hw/virtio/virtio.c:    dc->unrealize = virtio_device_unrealize;
./qemu_stm32/hw/virtio/virtio.c:    dc->bus_type = TYPE_VIRTIO_BUS;
./qemu_stm32/hw/virtio/virtio-pci.c:    if (!msix_enabled(&proxy->pci_dev) && vdc->guest_notifier_mask) {
./qemu_stm32/hw/virtio/virtio-pci.c:        vdc->guest_notifier_mask(vdev, n, !assign);
./qemu_stm32/hw/virtio/virtio-pci.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = virtio_9p_pci_properties;
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = virtio_pci_properties;
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->reset = virtio_pci_reset;
./qemu_stm32/hw/virtio/virtio-pci.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = virtio_blk_pci_properties;
./qemu_stm32/hw/virtio/virtio-pci.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = virtio_scsi_pci_properties;
./qemu_stm32/hw/virtio/virtio-pci.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = vhost_scsi_pci_properties;
./qemu_stm32/hw/virtio/virtio-pci.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = virtio_balloon_pci_properties;
./qemu_stm32/hw/virtio/virtio-pci.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = virtio_serial_pci_properties;
./qemu_stm32/hw/virtio/virtio-pci.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = virtio_net_properties;
./qemu_stm32/hw/virtio/virtio-pci.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/virtio/virtio-pci.c:    dc->props = virtio_rng_pci_properties;
./qemu_stm32/hw/input/vmmouse.c:    dc->realize = vmmouse_realizefn;
./qemu_stm32/hw/input/vmmouse.c:    dc->reset = vmmouse_reset;
./qemu_stm32/hw/input/vmmouse.c:    dc->vmsd = &vmstate_vmmouse;
./qemu_stm32/hw/input/vmmouse.c:    dc->props = vmmouse_properties;
./qemu_stm32/hw/input/vmmouse.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/input/pckbd.c:    dc->realize = i8042_realizefn;
./qemu_stm32/hw/input/pckbd.c:    dc->vmsd = &vmstate_kbd_isa;
./qemu_stm32/hw/input/lm832x.c:    dc->vmsd = &vmstate_lm_kbd;
./qemu_stm32/hw/input/pl050.c:    sdc->init = pl050_initfn;
./qemu_stm32/hw/input/pl050.c:    dc->vmsd = &vmstate_pl050;
./qemu_stm32/hw/input/milkymist-softusb.c:    dc->reset = milkymist_softusb_reset;
./qemu_stm32/hw/input/milkymist-softusb.c:    dc->vmsd = &vmstate_milkymist_softusb;
./qemu_stm32/hw/input/milkymist-softusb.c:    dc->props = milkymist_softusb_properties;
./qemu_stm32/hw/input/adb.c:            return adc->devreq(d, obuf, buf, len);
./qemu_stm32/hw/input/adb.c:    dc->realize = adb_device_realizefn;
./qemu_stm32/hw/input/adb.c:    dc->bus_type = TYPE_ADB_BUS;
./qemu_stm32/hw/input/adb.c:    akc->parent_realize = dc->realize;
./qemu_stm32/hw/input/adb.c:    dc->realize = adb_kbd_realizefn;
./qemu_stm32/hw/input/adb.c:    adc->devreq = adb_kbd_request;
./qemu_stm32/hw/input/adb.c:    dc->reset = adb_kbd_reset;
./qemu_stm32/hw/input/adb.c:    dc->vmsd = &vmstate_adb_kbd;
./qemu_stm32/hw/input/adb.c:    amc->parent_realize = dc->realize;
./qemu_stm32/hw/input/adb.c:    dc->realize = adb_mouse_realizefn;
./qemu_stm32/hw/input/adb.c:    adc->devreq = adb_mouse_request;
./qemu_stm32/hw/input/adb.c:    dc->reset = adb_mouse_reset;
./qemu_stm32/hw/input/adb.c:    dc->vmsd = &vmstate_adb_mouse;
./qemu_stm32/hw/core/qdev-properties-system.c:        if (dc->hotpluggable) {
./qemu_stm32/hw/core/hotplug.c:    if (hdc->plug) {
./qemu_stm32/hw/core/hotplug.c:        hdc->plug(plug_handler, plugged_dev, errp);
./qemu_stm32/hw/core/hotplug.c:    if (hdc->unplug) {
./qemu_stm32/hw/core/hotplug.c:        hdc->unplug(plug_handler, plugged_dev, errp);
./qemu_stm32/hw/core/qdev.c:    return dc->vmsd;
./qemu_stm32/hw/core/qdev.c:    if (dc->fw_name) {
./qemu_stm32/hw/core/qdev.c:        return dc->fw_name;
./qemu_stm32/hw/core/qdev.c:    if (dc->init) {
./qemu_stm32/hw/core/qdev.c:        int rc = dc->init(dev);
./qemu_stm32/hw/core/qdev.c:    if (dc->exit) {
./qemu_stm32/hw/core/qdev.c:        int rc = dc->exit(dev);
./qemu_stm32/hw/core/qdev.c:    if (!dc->hotpluggable) {
./qemu_stm32/hw/core/qdev.c:        assert(dc->unplug != NULL);
./qemu_stm32/hw/core/qdev.c:        if (dc->unplug(dev) < 0) { /* legacy handler */
./qemu_stm32/hw/core/qdev.c:        for (prop = dc->props; prop && prop->name; prop++) {
./qemu_stm32/hw/core/qdev.c:    if (dev->hotplugged && !dc->hotpluggable) {
./qemu_stm32/hw/core/qdev.c:        if (dc->realize) {
./qemu_stm32/hw/core/qdev.c:            dc->realize(dev, &local_err);
./qemu_stm32/hw/core/qdev.c:        if (dc->unrealize) {
./qemu_stm32/hw/core/qdev.c:            dc->unrealize(dev, local_errp);
./qemu_stm32/hw/core/qdev.c:    if (dc->unrealize) {
./qemu_stm32/hw/core/qdev.c:        dc->unrealize(dev, NULL);
./qemu_stm32/hw/core/qdev.c:    return dc->hotpluggable && (dev->parent_bus == NULL ||
./qemu_stm32/hw/core/qdev.c:    dc->realize = device_realize;
./qemu_stm32/hw/core/qdev.c:    dc->unrealize = device_unrealize;
./qemu_stm32/hw/core/qdev.c:    dc->hotpluggable = true;
Binary file ./qemu_stm32/hw/core/qdev.o matches
./qemu_stm32/hw/ssi/xilinx_spips.c:    dc->realize = xilinx_qspips_realize;
./qemu_stm32/hw/ssi/xilinx_spips.c:    dc->realize = xilinx_spips_realize;
./qemu_stm32/hw/ssi/xilinx_spips.c:    dc->reset = xilinx_spips_reset;
./qemu_stm32/hw/ssi/xilinx_spips.c:    dc->props = xilinx_spips_properties;
./qemu_stm32/hw/ssi/xilinx_spips.c:    dc->vmsd = &vmstate_xilinx_spips;
./qemu_stm32/hw/ssi/xilinx_spi.c:    dc->reset = xlx_spi_reset;
./qemu_stm32/hw/ssi/xilinx_spi.c:    dc->props = xilinx_spi_properties;
./qemu_stm32/hw/ssi/xilinx_spi.c:    dc->vmsd = &vmstate_xilinx_spi;
./qemu_stm32/hw/ssi/ssi.c:    dc->init = ssi_slave_init;
./qemu_stm32/hw/ssi/ssi.c:    dc->bus_type = TYPE_SSI_BUS;
./qemu_stm32/hw/ssi/pl022.c:    sdc->init = pl022_init;
./qemu_stm32/hw/usb/hcd-ehci-pci.c:    dc->hotpluggable = false;
./qemu_stm32/hw/usb/hcd-ehci-pci.c:    dc->vmsd = &vmstate_ehci_pci;
./qemu_stm32/hw/usb/hcd-ehci-pci.c:    dc->props = ehci_pci_properties;
./qemu_stm32/hw/usb/hcd-ehci-pci.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/ccid-card-passthru.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/ccid-card-passthru.c:    dc->desc = "passthrough smartcard";
./qemu_stm32/hw/usb/ccid-card-passthru.c:    dc->vmsd = &passthru_vmstate;
./qemu_stm32/hw/usb/ccid-card-passthru.c:    dc->props = passthru_card_properties;
./qemu_stm32/hw/usb/dev-hub.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/usb/dev-hub.c:    dc->fw_name = "hub";
./qemu_stm32/hw/usb/dev-hub.c:    dc->vmsd = &vmstate_usb_hub;
./qemu_stm32/hw/usb/dev-audio.c:    dc->vmsd          = &vmstate_usb_audio;
./qemu_stm32/hw/usb/dev-audio.c:    dc->props         = usb_audio_properties;
./qemu_stm32/hw/usb/dev-audio.c:    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);
./qemu_stm32/hw/usb/dev-smartcard-reader.c:    dc->desc = "CCID Rev 1.1 smartcard reader";
./qemu_stm32/hw/usb/dev-smartcard-reader.c:    dc->vmsd = &ccid_vmstate;
./qemu_stm32/hw/usb/dev-smartcard-reader.c:    dc->props = ccid_properties;
./qemu_stm32/hw/usb/dev-smartcard-reader.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/hcd-ehci-sysbus.c:    dc->realize = usb_ehci_sysbus_realize;
./qemu_stm32/hw/usb/hcd-ehci-sysbus.c:    dc->vmsd = &vmstate_ehci_sysbus;
./qemu_stm32/hw/usb/hcd-ehci-sysbus.c:    dc->props = ehci_sysbus_properties;
./qemu_stm32/hw/usb/hcd-ehci-sysbus.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/hcd-ehci-sysbus.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/hcd-ehci-sysbus.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/hcd-ehci-sysbus.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/hcd-ehci-sysbus.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/dev-wacom.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/dev-wacom.c:    dc->desc = "QEMU PenPartner Tablet";
./qemu_stm32/hw/usb/dev-wacom.c:    dc->vmsd = &vmstate_usb_wacom;
./qemu_stm32/hw/usb/host-libusb.c:    dc->vmsd = &vmstate_usb_host;
./qemu_stm32/hw/usb/host-libusb.c:    dc->props = usb_host_dev_properties;
./qemu_stm32/hw/usb/host-libusb.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/usb/dev-network.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/usb/dev-network.c:    dc->fw_name = "network";
./qemu_stm32/hw/usb/dev-network.c:    dc->vmsd = &vmstate_usb_net;
./qemu_stm32/hw/usb/dev-network.c:    dc->props = net_properties;
./qemu_stm32/hw/usb/dev-serial.c:    dc->vmsd = &vmstate_usb_serial;
./qemu_stm32/hw/usb/dev-serial.c:    dc->props = serial_properties;
./qemu_stm32/hw/usb/dev-serial.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/dev-serial.c:    dc->vmsd = &vmstate_usb_serial;
./qemu_stm32/hw/usb/dev-serial.c:    dc->props = braille_properties;
./qemu_stm32/hw/usb/dev-serial.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/hcd-xhci.c:    dc->vmsd    = &vmstate_xhci;
./qemu_stm32/hw/usb/hcd-xhci.c:    dc->props   = xhci_properties;
./qemu_stm32/hw/usb/hcd-xhci.c:    dc->reset   = xhci_reset;
./qemu_stm32/hw/usb/hcd-xhci.c:    dc->hotpluggable   = false;
./qemu_stm32/hw/usb/hcd-xhci.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/hcd-uhci.c:    dc->hotpluggable = false;
./qemu_stm32/hw/usb/hcd-uhci.c:    dc->vmsd = &vmstate_uhci;
./qemu_stm32/hw/usb/hcd-uhci.c:    dc->props = uhci_properties;
./qemu_stm32/hw/usb/hcd-uhci.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/dev-hid.c:    dc->vmsd = &vmstate_usb_ptr;
./qemu_stm32/hw/usb/dev-hid.c:    dc->props = usb_tablet_properties;
./qemu_stm32/hw/usb/dev-hid.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/dev-hid.c:    dc->vmsd = &vmstate_usb_ptr;
./qemu_stm32/hw/usb/dev-hid.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/dev-hid.c:    dc->vmsd = &vmstate_usb_kbd;
./qemu_stm32/hw/usb/dev-hid.c:    dc->props = usb_keyboard_properties;
./qemu_stm32/hw/usb/dev-hid.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/dev-mtp.c:    dc->fw_name = "mtp";
./qemu_stm32/hw/usb/dev-mtp.c:    dc->vmsd = &vmstate_usb_mtp;
./qemu_stm32/hw/usb/dev-mtp.c:    dc->props = mtp_properties;
./qemu_stm32/hw/usb/dev-storage.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/usb/dev-storage.c:    dc->fw_name = "storage";
./qemu_stm32/hw/usb/dev-storage.c:    dc->vmsd = &vmstate_usb_msd;
./qemu_stm32/hw/usb/dev-storage.c:    dc->props = msd_properties;
./qemu_stm32/hw/usb/dev-uas.c:    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);
./qemu_stm32/hw/usb/dev-uas.c:    dc->fw_name = "storage";
./qemu_stm32/hw/usb/dev-uas.c:    dc->vmsd = &vmstate_usb_uas;
./qemu_stm32/hw/usb/dev-uas.c:    dc->props = uas_properties;
./qemu_stm32/hw/usb/dev-bluetooth.c:    dc->vmsd = &vmstate_usb_bt;
./qemu_stm32/hw/usb/dev-bluetooth.c:    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
./qemu_stm32/hw/usb/ccid-card-emulated.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/usb/ccid-card-emulated.c:    dc->desc = "emulated smartcard";
./qemu_stm32/hw/usb/ccid-card-emulated.c:    dc->props = emulated_card_properties;
./qemu_stm32/hw/usb/hcd-ohci.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/hcd-ohci.c:    dc->desc = "Apple USB Controller";
./qemu_stm32/hw/usb/hcd-ohci.c:    dc->props = ohci_pci_properties;
./qemu_stm32/hw/usb/hcd-ohci.c:    dc->hotpluggable = false;
./qemu_stm32/hw/usb/hcd-ohci.c:    dc->vmsd = &vmstate_ohci;
./qemu_stm32/hw/usb/hcd-ohci.c:    dc->realize = ohci_realize_pxa;
./qemu_stm32/hw/usb/hcd-ohci.c:    set_bit(DEVICE_CATEGORY_USB, dc->categories);
./qemu_stm32/hw/usb/hcd-ohci.c:    dc->desc = "OHCI USB Controller";
./qemu_stm32/hw/usb/hcd-ohci.c:    dc->props = ohci_sysbus_properties;
./qemu_stm32/hw/usb/redirect.c:    dc->vmsd           = &usbredir_vmstate;
./qemu_stm32/hw/usb/redirect.c:    dc->props          = usbredir_properties;
./qemu_stm32/hw/usb/redirect.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/pci/pcie_port.c:    dc->props = pcie_port_props;
./qemu_stm32/hw/pci/pcie_port.c:    dc->props = pcie_slot_props;
./qemu_stm32/hw/i2c/bitbang_i2c.c:    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
./qemu_stm32/hw/i2c/bitbang_i2c.c:    dc->desc = "Virtual GPIO to I2C bridge";
./qemu_stm32/hw/i2c/exynos4210_i2c.c:    dc->vmsd = &exynos4210_i2c_vmstate;
./qemu_stm32/hw/i2c/exynos4210_i2c.c:    dc->reset = exynos4210_i2c_reset;
./qemu_stm32/hw/i2c/exynos4210_i2c.c:    sbdc->init = exynos4210_i2c_realize;
./qemu_stm32/hw/i2c/omap_i2c.c:    dc->props = omap_i2c_properties;
./qemu_stm32/hw/i2c/omap_i2c.c:    dc->reset = omap_i2c_reset;
./qemu_stm32/hw/i2c/omap_i2c.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/i2c/smbus_eeprom.c:    dc->props = smbus_eeprom_properties;
./qemu_stm32/hw/i2c/smbus_eeprom.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/i2c/smbus_ich9.c:    dc->vmsd = &vmstate_ich9_smbus;
./qemu_stm32/hw/i2c/smbus_ich9.c:    dc->desc = "ICH9 SMBUS Bridge";
./qemu_stm32/hw/i2c/smbus_ich9.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/sparc/sun4m.c:    dc->props = prom_properties;
./qemu_stm32/hw/sparc/sun4m.c:    dc->props = ram_properties;
./qemu_stm32/hw/acpi/piix4.c:    dc->desc = "PM";
./qemu_stm32/hw/acpi/piix4.c:    dc->vmsd = &vmstate_acpi;
./qemu_stm32/hw/acpi/piix4.c:    dc->props = piix4_pm_properties;
./qemu_stm32/hw/acpi/piix4.c:    dc->cannot_instantiate_with_device_add_yet = true;
./qemu_stm32/hw/acpi/piix4.c:    dc->hotpluggable = false;
./qemu_stm32/hw/acpi/pcihp.c:    return (pc->is_bridge && !dev->qdev.hotplugged) || !dc->hotpluggable;
./qemu_stm32/hw/char/cadence_uart.c:    sdc->init = cadence_uart_init;
./qemu_stm32/hw/char/cadence_uart.c:    dc->vmsd = &vmstate_cadence_uart;
./qemu_stm32/hw/char/cadence_uart.c:    dc->reset = cadence_uart_reset;
./qemu_stm32/hw/char/ipoctal232.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/ipoctal232.c:    dc->desc    = "GE IP-Octal 232 8-channel RS-232 IndustryPack";
./qemu_stm32/hw/char/ipoctal232.c:    dc->props   = ipoctal_properties;
./qemu_stm32/hw/char/ipoctal232.c:    dc->vmsd    = &vmstate_ipoctal;
./qemu_stm32/hw/char/virtio-console.c:    dc->props = virtserialport_properties;
./qemu_stm32/hw/char/lm32_uart.c:    dc->reset = uart_reset;
./qemu_stm32/hw/char/lm32_uart.c:    dc->vmsd = &vmstate_lm32_uart;
./qemu_stm32/hw/char/serial-isa.c:    dc->realize = serial_isa_realizefn;
./qemu_stm32/hw/char/serial-isa.c:    dc->vmsd = &vmstate_isa_serial;
./qemu_stm32/hw/char/serial-isa.c:    dc->props = serial_isa_properties;
./qemu_stm32/hw/char/serial-isa.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/serial-pci.c:    dc->vmsd = &vmstate_pci_serial;
./qemu_stm32/hw/char/serial-pci.c:    dc->props = serial_pci_properties;
./qemu_stm32/hw/char/serial-pci.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/serial-pci.c:    dc->vmsd = &vmstate_pci_multi_serial;
./qemu_stm32/hw/char/serial-pci.c:    dc->props = multi_2x_serial_pci_properties;
./qemu_stm32/hw/char/serial-pci.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/serial-pci.c:    dc->vmsd = &vmstate_pci_multi_serial;
./qemu_stm32/hw/char/serial-pci.c:    dc->props = multi_4x_serial_pci_properties;
./qemu_stm32/hw/char/serial-pci.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/virtio-serial-bus.c:    dc->props = virtio_serial_properties;
./qemu_stm32/hw/char/virtio-serial-bus.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/virtio-serial-bus.c:    vdc->realize = virtio_serial_device_realize;
./qemu_stm32/hw/char/virtio-serial-bus.c:    vdc->unrealize = virtio_serial_device_unrealize;
./qemu_stm32/hw/char/virtio-serial-bus.c:    vdc->get_features = get_features;
./qemu_stm32/hw/char/virtio-serial-bus.c:    vdc->get_config = get_config;
./qemu_stm32/hw/char/virtio-serial-bus.c:    vdc->set_status = set_status;
./qemu_stm32/hw/char/virtio-serial-bus.c:    vdc->reset = vser_reset;
./qemu_stm32/hw/char/virtio-serial-bus.c:    vdc->save = virtio_serial_save_device;
./qemu_stm32/hw/char/virtio-serial-bus.c:    vdc->load = virtio_serial_load_device;
./qemu_stm32/hw/char/sclpconsole.c:    dc->props = console_properties;
./qemu_stm32/hw/char/sclpconsole.c:    dc->reset = console_reset;
./qemu_stm32/hw/char/sclpconsole.c:    dc->vmsd = &vmstate_sclpconsole;
./qemu_stm32/hw/char/digic-uart.c:    dc->realize = digic_uart_realize;
./qemu_stm32/hw/char/digic-uart.c:    dc->reset = digic_uart_reset;
./qemu_stm32/hw/char/digic-uart.c:    dc->vmsd = &vmstate_digic_uart;
./qemu_stm32/hw/char/pl011.c:    dc->realize = pl011_realize;
./qemu_stm32/hw/char/pl011.c:    dc->vmsd = &vmstate_pl011;
./qemu_stm32/hw/char/exynos4210_uart.c:    dc->reset = exynos4210_uart_reset;
./qemu_stm32/hw/char/exynos4210_uart.c:    dc->props = exynos4210_uart_properties;
./qemu_stm32/hw/char/exynos4210_uart.c:    dc->vmsd = &vmstate_exynos4210_uart;
./qemu_stm32/hw/char/lm32_juart.c:    dc->reset = juart_reset;
./qemu_stm32/hw/char/lm32_juart.c:    dc->vmsd = &vmstate_lm32_juart;
./qemu_stm32/hw/char/stm32_uart.c:    dc->reset = stm32_uart_reset;
./qemu_stm32/hw/char/stm32_uart.c:    dc->props = stm32_uart_properties;
./qemu_stm32/hw/char/spapr_vty.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/spapr_vty.c:    dc->props = spapr_vty_properties;
./qemu_stm32/hw/char/spapr_vty.c:    dc->vmsd = &vmstate_spapr_vty;
./qemu_stm32/hw/char/xilinx_uartlite.c:    dc->reset = xilinx_uartlite_reset;
./qemu_stm32/hw/char/xilinx_uartlite.c:    dc->realize = xilinx_uartlite_realize;
./qemu_stm32/hw/char/imx_serial.c:    dc->vmsd = &vmstate_imx_serial;
./qemu_stm32/hw/char/imx_serial.c:    dc->reset = imx_serial_reset_at_boot;
./qemu_stm32/hw/char/imx_serial.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/imx_serial.c:    dc->desc = "i.MX series UART";
./qemu_stm32/hw/char/imx_serial.c:    dc->props = imx32_serial_properties;
./qemu_stm32/hw/char/grlib_apbuart.c:    dc->reset = grlib_apbuart_reset;
./qemu_stm32/hw/char/grlib_apbuart.c:    dc->props = grlib_apbuart_properties;
./qemu_stm32/hw/char/etraxfs_ser.c:    dc->reset = etraxfs_ser_reset;
./qemu_stm32/hw/char/sclpconsole-lm.c:    dc->props = console_properties;
./qemu_stm32/hw/char/sclpconsole-lm.c:    dc->reset = console_reset;
./qemu_stm32/hw/char/sclpconsole-lm.c:    dc->vmsd = &vmstate_sclplmconsole;
./qemu_stm32/hw/char/parallel.c:    dc->realize = parallel_isa_realizefn;
./qemu_stm32/hw/char/parallel.c:    dc->props = parallel_isa_properties;
./qemu_stm32/hw/char/parallel.c:    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
./qemu_stm32/hw/char/escc.c:    dc->reset = escc_reset;
./qemu_stm32/hw/char/escc.c:    dc->vmsd = &vmstate_escc;
./qemu_stm32/hw/char/escc.c:    dc->props = escc_properties;
./qemu_stm32/hw/char/debugcon.c:    dc->realize = debugcon_isa_realizefn;
./qemu_stm32/hw/char/debugcon.c:    dc->props = debugcon_isa_properties;
./qemu_stm32/hw/char/debugcon.c:    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
./qemu_stm32/hw/char/milkymist-uart.c:    dc->realize = milkymist_uart_realize;
./qemu_stm32/hw/char/milkymist-uart.c:    dc->reset = milkymist_uart_reset;
./qemu_stm32/hw/char/milkymist-uart.c:    dc->vmsd = &vmstate_milkymist_uart;
Binary file ./qemu_stm32/arm-softmmu/dump.o matches
Binary file ./qemu_stm32/arm-softmmu/target-arm/translate.o matches
Binary file ./qemu_stm32/arm-softmmu/qemu-system-arm matches
./qemu_stm32/tests/Makefile:check-qtest-i386-y += tests/fdc-test$(EXESUF)
./qemu_stm32/tests/Makefile:tests/fdc-test$(EXESUF): tests/fdc-test.o
./qemu_stm32/tests/test-qdev-global-props.c:    dc->realize = NULL;
./qemu_stm32/tests/test-qdev-global-props.c:    dc->props = static_props;
./qemu_stm32/tests/test-qdev-global-props.c:    dc->realize = NULL;
./qemu_stm32/target-arm/cpu.c:    acc->parent_realize = dc->realize;
./qemu_stm32/target-arm/cpu.c:    dc->realize = arm_cpu_realizefn;
./qemu_stm32/target-arm/cpu.c:    dc->props = arm_cpu_properties;
./qemu_stm32/target-arm/translate-a64.c:    dc->tb = tb;
./qemu_stm32/target-arm/translate-a64.c:    dc->is_jmp = DISAS_NEXT;
./qemu_stm32/target-arm/translate-a64.c:    dc->pc = pc_start;
./qemu_stm32/target-arm/translate-a64.c:    dc->singlestep_enabled = cs->singlestep_enabled;
./qemu_stm32/target-arm/translate-a64.c:    dc->condjmp = 0;
./qemu_stm32/target-arm/translate-a64.c:    dc->aarch64 = 1;
./qemu_stm32/target-arm/translate-a64.c:    dc->thumb = 0;
./qemu_stm32/target-arm/translate-a64.c:    dc->bswap_code = 0;
./qemu_stm32/target-arm/translate-a64.c:    dc->condexec_mask = 0;
./qemu_stm32/target-arm/translate-a64.c:    dc->condexec_cond = 0;
./qemu_stm32/target-arm/translate-a64.c:    dc->user = (ARM_TBFLAG_AA64_EL(tb->flags) == 0);
./qemu_stm32/target-arm/translate-a64.c:    dc->cpacr_fpen = ARM_TBFLAG_AA64_FPEN(tb->flags);
./qemu_stm32/target-arm/translate-a64.c:    dc->vec_len = 0;
./qemu_stm32/target-arm/translate-a64.c:    dc->vec_stride = 0;
./qemu_stm32/target-arm/translate-a64.c:    dc->cp_regs = cpu->cp_regs;
./qemu_stm32/target-arm/translate-a64.c:    dc->current_pl = arm_current_pl(env);
./qemu_stm32/target-arm/translate-a64.c:    dc->features = env->features;
./qemu_stm32/target-arm/translate-a64.c:                if (bp->pc == dc->pc) {
./qemu_stm32/target-arm/translate-a64.c:                    dc->pc += 2;
./qemu_stm32/target-arm/translate-a64.c:            tcg_ctx.gen_opc_pc[lj] = dc->pc;
./qemu_stm32/target-arm/translate-a64.c:            tcg_gen_debug_insn_start(dc->pc);
./qemu_stm32/target-arm/translate-a64.c:                    dc->pc);
./qemu_stm32/target-arm/translate-a64.c:    } while (!dc->is_jmp && tcg_ctx.gen_opc_ptr < gen_opc_end &&
./qemu_stm32/target-arm/translate-a64.c:             dc->pc < next_page_start &&
./qemu_stm32/target-arm/translate-a64.c:    if (unlikely(cs->singlestep_enabled) && dc->is_jmp != DISAS_EXC) {
./qemu_stm32/target-arm/translate-a64.c:        assert(dc->is_jmp != DISAS_TB_JUMP);
./qemu_stm32/target-arm/translate-a64.c:        if (dc->is_jmp != DISAS_JUMP) {
./qemu_stm32/target-arm/translate-a64.c:            gen_a64_set_pc_im(dc->pc);
./qemu_stm32/target-arm/translate-a64.c:        switch (dc->is_jmp) {
./qemu_stm32/target-arm/translate-a64.c:            gen_goto_tb(dc, 1, dc->pc);
./qemu_stm32/target-arm/translate-a64.c:            gen_a64_set_pc_im(dc->pc);
./qemu_stm32/target-arm/translate-a64.c:            gen_a64_set_pc_im(dc->pc);
./qemu_stm32/target-arm/translate-a64.c:            gen_a64_set_pc_im(dc->pc);
./qemu_stm32/target-arm/translate-a64.c:        log_target_disas(env, pc_start, dc->pc - pc_start,
./qemu_stm32/target-arm/translate-a64.c:                         4 | (dc->bswap_code << 1));
./qemu_stm32/target-arm/translate-a64.c:        tb->size = dc->pc - pc_start;
./qemu_stm32/target-arm/translate.h:    return (dc->features & (1ULL << feature)) != 0;
./qemu_stm32/target-arm/translate.c:    dc->tb = tb;
./qemu_stm32/target-arm/translate.c:    dc->is_jmp = DISAS_NEXT;
./qemu_stm32/target-arm/translate.c:    dc->pc = pc_start;
./qemu_stm32/target-arm/translate.c:    dc->singlestep_enabled = cs->singlestep_enabled;
./qemu_stm32/target-arm/translate.c:    dc->condjmp = 0;
./qemu_stm32/target-arm/translate.c:    dc->aarch64 = 0;
./qemu_stm32/target-arm/translate.c:    dc->thumb = ARM_TBFLAG_THUMB(tb->flags);
./qemu_stm32/target-arm/translate.c:    dc->bswap_code = ARM_TBFLAG_BSWAP_CODE(tb->flags);
./qemu_stm32/target-arm/translate.c:    dc->condexec_mask = (ARM_TBFLAG_CONDEXEC(tb->flags) & 0xf) << 1;
./qemu_stm32/target-arm/translate.c:    dc->condexec_cond = ARM_TBFLAG_CONDEXEC(tb->flags) >> 4;
./qemu_stm32/target-arm/translate.c:    dc->user = (ARM_TBFLAG_PRIV(tb->flags) == 0);
./qemu_stm32/target-arm/translate.c:    dc->cpacr_fpen = ARM_TBFLAG_CPACR_FPEN(tb->flags);
./qemu_stm32/target-arm/translate.c:    dc->vfp_enabled = ARM_TBFLAG_VFPEN(tb->flags);
./qemu_stm32/target-arm/translate.c:    dc->vec_len = ARM_TBFLAG_VECLEN(tb->flags);
./qemu_stm32/target-arm/translate.c:    dc->vec_stride = ARM_TBFLAG_VECSTRIDE(tb->flags);
./qemu_stm32/target-arm/translate.c:    dc->cp_regs = cpu->cp_regs;
./qemu_stm32/target-arm/translate.c:    dc->current_pl = arm_current_pl(env);
./qemu_stm32/target-arm/translate.c:    dc->features = env->features;
./qemu_stm32/target-arm/translate.c:    if (dc->condexec_mask || dc->condexec_cond)
./qemu_stm32/target-arm/translate.c:        if (dc->pc >= 0xffff0000) {
./qemu_stm32/target-arm/translate.c:            dc->is_jmp = DISAS_UPDATE;
./qemu_stm32/target-arm/translate.c:        if (dc->pc >= 0xfffffff0 && IS_M(env)) {
./qemu_stm32/target-arm/translate.c:            dc->is_jmp = DISAS_UPDATE;
./qemu_stm32/target-arm/translate.c:                if (bp->pc == dc->pc) {
./qemu_stm32/target-arm/translate.c:                    dc->pc += 2;
./qemu_stm32/target-arm/translate.c:            tcg_ctx.gen_opc_pc[lj] = dc->pc;
./qemu_stm32/target-arm/translate.c:            gen_opc_condexec_bits[lj] = (dc->condexec_cond << 4) | (dc->condexec_mask >> 1);
./qemu_stm32/target-arm/translate.c:            tcg_gen_debug_insn_start(dc->pc);
./qemu_stm32/target-arm/translate.c:	printf("dc->pc: 0x%08X \n", dc->pc);
./qemu_stm32/target-arm/translate.c:        if (dc->thumb) {
./qemu_stm32/target-arm/translate.c:            if (dc->condexec_mask) {
./qemu_stm32/target-arm/translate.c:                dc->condexec_cond = (dc->condexec_cond & 0xe)
./qemu_stm32/target-arm/translate.c:                                   | ((dc->condexec_mask >> 4) & 1);
./qemu_stm32/target-arm/translate.c:                dc->condexec_mask = (dc->condexec_mask << 1) & 0x1f;
./qemu_stm32/target-arm/translate.c:                if (dc->condexec_mask == 0) {
./qemu_stm32/target-arm/translate.c:                    dc->condexec_cond = 0;
./qemu_stm32/target-arm/translate.c:        if (dc->condjmp && !dc->is_jmp) {
./qemu_stm32/target-arm/translate.c:            gen_set_label(dc->condlabel);
./qemu_stm32/target-arm/translate.c:            dc->condjmp = 0;
./qemu_stm32/target-arm/translate.c:                    dc->pc);
./qemu_stm32/target-arm/translate.c:    } while (!dc->is_jmp && tcg_ctx.gen_opc_ptr < gen_opc_end &&
./qemu_stm32/target-arm/translate.c:             dc->pc < next_page_start &&
./qemu_stm32/target-arm/translate.c:        if (dc->condjmp) {
./qemu_stm32/target-arm/translate.c:    /* At this stage dc->condjmp will only be set when the skipped
./qemu_stm32/target-arm/translate.c:        if (dc->condjmp) {
./qemu_stm32/target-arm/translate.c:            if (dc->is_jmp == DISAS_SWI) {
./qemu_stm32/target-arm/translate.c:                gen_exception(EXCP_SWI, syn_aa32_svc(dc->svc_imm, dc->thumb));
./qemu_stm32/target-arm/translate.c:            gen_set_label(dc->condlabel);
./qemu_stm32/target-arm/translate.c:        if (dc->condjmp || !dc->is_jmp) {
./qemu_stm32/target-arm/translate.c:            gen_set_pc_im(dc, dc->pc);
./qemu_stm32/target-arm/translate.c:            dc->condjmp = 0;
./qemu_stm32/target-arm/translate.c:        if (dc->is_jmp == DISAS_SWI && !dc->condjmp) {
./qemu_stm32/target-arm/translate.c:            gen_exception(EXCP_SWI, syn_aa32_svc(dc->svc_imm, dc->thumb));
./qemu_stm32/target-arm/translate.c:        switch(dc->is_jmp) {
./qemu_stm32/target-arm/translate.c:            gen_goto_tb(dc, 1, dc->pc);
./qemu_stm32/target-arm/translate.c:            gen_exception(EXCP_SWI, syn_aa32_svc(dc->svc_imm, dc->thumb));
./qemu_stm32/target-arm/translate.c:        if (dc->condjmp) {
./qemu_stm32/target-arm/translate.c:            gen_set_label(dc->condlabel);
./qemu_stm32/target-arm/translate.c:            gen_goto_tb(dc, 1, dc->pc);
./qemu_stm32/target-arm/translate.c:            dc->condjmp = 0;
./qemu_stm32/target-arm/translate.c:        log_target_disas(env, pc_start, dc->pc - pc_start,
./qemu_stm32/target-arm/translate.c:                         dc->thumb | (dc->bswap_code << 1));
./qemu_stm32/target-arm/translate.c:        tb->size = dc->pc - pc_start;
./qemu_stm32/qdict-test-data.txt:cdc-acm.c: 43081
./qemu_stm32/qdict-test-data.txt:cdc-acm.h: 3737
./qemu_stm32/qdict-test-data.txt:cdc-wdm.c: 19634
./qemu_stm32/savevm.c:        if (!dc->vmsd) {
./qemu_stm32/savevm.c:                dc->vmsd->version_id);
./qemu_stm32/savevm.c:                dc->vmsd->minimum_version_id);
./qemu_stm32/savevm.c:        dump_vmstate_vmsd(out_file, dc->vmsd, indent, false);
